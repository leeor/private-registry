// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Express = require("bs-express/src/Express.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Graphiql = require("./Graphiql.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Graphql_Json = require("reason-graphql/src/Graphql_Json.bs.js");
var GraphqlPromise = require("reason-graphql/src/variations/GraphqlPromise.bs.js");
var Graphql_Language_Parser = require("reason-graphql/src/language/Graphql_Language_Parser.bs.js");

function parseBodyIntoDocumentAndVariables(req) {
  var match = Express.$$Request[/* bodyJSON */3](req);
  if (match !== undefined) {
    var match$1 = Js_json.decodeObject(Caml_option.valFromOption(match));
    if (match$1 !== undefined) {
      var body = Caml_option.valFromOption(match$1);
      var match$2 = Js_dict.get(body, "query");
      if (match$2 !== undefined) {
        var match$3 = Js_json.decodeString(Caml_option.valFromOption(match$2));
        if (match$3 !== undefined) {
          var match$4 = Graphql_Language_Parser.parse(match$3);
          if (match$4.tag) {
            return /* Error */Block.__(1, ["GraphQL Syntax Error: " + match$4[0][0]]);
          } else {
            var $$document = match$4[0];
            var match$5 = Js_dict.get(body, "variables");
            if (match$5 !== undefined) {
              var match$6 = Graphql_Json.toVariables(Caml_option.valFromOption(match$5));
              if (match$6.tag) {
                return /* Ok */Block.__(0, [/* tuple */[
                            $$document,
                            undefined
                          ]]);
              } else {
                return /* Ok */Block.__(0, [/* tuple */[
                            $$document,
                            match$6[0]
                          ]]);
              }
            } else {
              return /* Ok */Block.__(0, [/* tuple */[
                          $$document,
                          undefined
                        ]]);
            }
          }
        } else {
          return /* Error */Block.__(1, ["Query must be a string"]);
        }
      } else {
        return /* Error */Block.__(1, ["Must provide Query string"]);
      }
    } else {
      return /* Error */Block.__(1, ["body must be an JSON object"]);
    }
  } else {
    return /* Error */Block.__(1, ["no body found"]);
  }
}

function middleware(provideCtx, $staropt$star, schema) {
  var graphiql = $staropt$star !== undefined ? $staropt$star : false;
  return Express.PromiseMiddleware[/* from */0]((function (next, req, res) {
                var match = Express.$$Request[/* methodRaw */13](req);
                switch (match) {
                  case "GET" : 
                      if (graphiql) {
                        return Promise.resolve(Express.$$Response[/* sendString */2](Graphiql.html, Express.$$Response[/* status */9](/* Ok */0)(res)));
                      } else {
                        return Promise.resolve(Curry._2(next, Express.Next[/* route */1], res));
                      }
                  case "POST" : 
                      var match$1 = parseBodyIntoDocumentAndVariables(req);
                      if (match$1.tag) {
                        return Promise.resolve(Express.$$Response[/* sendString */2](match$1[0], Express.$$Response[/* status */9](/* BadRequest */19)(res)));
                      } else {
                        var match$2 = match$1[0];
                        return Curry._4(GraphqlPromise.Schema[/* execute */44], match$2[1], match$2[0], schema, Curry._2(provideCtx, req, res)).then((function ($$const) {
                                        return Promise.resolve(Graphql_Json.fromConstValue($$const));
                                      })).then((function (json) {
                                      return Promise.resolve(Express.$$Response[/* sendJson */3](json, res));
                                    }));
                      }
                  default:
                    return Promise.resolve(Curry._2(next, Express.Next[/* route */1], res));
                }
              }));
}

exports.parseBodyIntoDocumentAndVariables = parseBodyIntoDocumentAndVariables;
exports.middleware = middleware;
/* Express Not a pure module */
