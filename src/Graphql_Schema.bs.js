// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Set = require("bs-platform/lib/js/set.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var Printf = require("bs-platform/lib/js/printf.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Graphql_Json = require("./Graphql_Json.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var CamlinternalLazy = require("bs-platform/lib/js/camlinternalLazy.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function join(_$staropt$star, _param) {
  while(true) {
    var param = _param;
    var $staropt$star = _$staropt$star;
    var memo = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    if (param) {
      var err = param[0];
      if (err.tag) {
        return err;
      } else {
        _param = param[1];
        _$staropt$star = /* :: */[
          err[0],
          memo
        ];
        continue ;
      }
    } else {
      return /* Ok */Block.__(0, [Belt_List.reverse(memo)]);
    }
  };
}

function all(list, f) {
  return (function (eta) {
              return join(undefined, eta);
            })(Belt_List.map(list, f));
}

var Result = {
  getExn: Belt_Result.getExn,
  mapWithDefaultU: Belt_Result.mapWithDefaultU,
  mapWithDefault: Belt_Result.mapWithDefault,
  mapU: Belt_Result.mapU,
  map: Belt_Result.map,
  flatMapU: Belt_Result.flatMapU,
  flatMap: Belt_Result.flatMap,
  getWithDefault: Belt_Result.getWithDefault,
  isOk: Belt_Result.isOk,
  isError: Belt_Result.isError,
  eqU: Belt_Result.eqU,
  eq: Belt_Result.eq,
  cmpU: Belt_Result.cmpU,
  cmp: Belt_Result.cmp,
  join: join,
  all: all
};

var List = {
  length: Belt_List.length,
  size: Belt_List.size,
  head: Belt_List.head,
  headExn: Belt_List.headExn,
  tail: Belt_List.tail,
  tailExn: Belt_List.tailExn,
  add: Belt_List.add,
  get: Belt_List.get,
  getExn: Belt_List.getExn,
  make: Belt_List.make,
  makeByU: Belt_List.makeByU,
  makeBy: Belt_List.makeBy,
  shuffle: Belt_List.shuffle,
  drop: Belt_List.drop,
  take: Belt_List.take,
  splitAt: Belt_List.splitAt,
  concat: Belt_List.concat,
  concatMany: Belt_List.concatMany,
  reverseConcat: Belt_List.reverseConcat,
  flatten: Belt_List.flatten,
  mapU: Belt_List.mapU,
  map: Belt_List.map,
  zip: Belt_List.zip,
  zipByU: Belt_List.zipByU,
  zipBy: Belt_List.zipBy,
  mapWithIndexU: Belt_List.mapWithIndexU,
  mapWithIndex: Belt_List.mapWithIndex,
  fromArray: Belt_List.fromArray,
  toArray: Belt_List.toArray,
  reverse: Belt_List.reverse,
  mapReverseU: Belt_List.mapReverseU,
  mapReverse: Belt_List.mapReverse,
  forEachU: Belt_List.forEachU,
  forEach: Belt_List.forEach,
  forEachWithIndexU: Belt_List.forEachWithIndexU,
  forEachWithIndex: Belt_List.forEachWithIndex,
  reduceU: Belt_List.reduceU,
  reduce: Belt_List.reduce,
  reduceWithIndexU: Belt_List.reduceWithIndexU,
  reduceWithIndex: Belt_List.reduceWithIndex,
  reduceReverseU: Belt_List.reduceReverseU,
  reduceReverse: Belt_List.reduceReverse,
  mapReverse2U: Belt_List.mapReverse2U,
  mapReverse2: Belt_List.mapReverse2,
  forEach2U: Belt_List.forEach2U,
  forEach2: Belt_List.forEach2,
  reduce2U: Belt_List.reduce2U,
  reduce2: Belt_List.reduce2,
  reduceReverse2U: Belt_List.reduceReverse2U,
  reduceReverse2: Belt_List.reduceReverse2,
  everyU: Belt_List.everyU,
  every: Belt_List.every,
  someU: Belt_List.someU,
  some: Belt_List.some,
  every2U: Belt_List.every2U,
  every2: Belt_List.every2,
  some2U: Belt_List.some2U,
  some2: Belt_List.some2,
  cmpByLength: Belt_List.cmpByLength,
  cmpU: Belt_List.cmpU,
  cmp: Belt_List.cmp,
  eqU: Belt_List.eqU,
  eq: Belt_List.eq,
  hasU: Belt_List.hasU,
  has: Belt_List.has,
  getByU: Belt_List.getByU,
  getBy: Belt_List.getBy,
  keepU: Belt_List.keepU,
  keep: Belt_List.keep,
  filter: Belt_List.filter,
  keepWithIndexU: Belt_List.keepWithIndexU,
  keepWithIndex: Belt_List.keepWithIndex,
  filterWithIndex: Belt_List.filterWithIndex,
  keepMapU: Belt_List.keepMapU,
  keepMap: Belt_List.keepMap,
  partitionU: Belt_List.partitionU,
  partition: Belt_List.partition,
  unzip: Belt_List.unzip,
  getAssocU: Belt_List.getAssocU,
  getAssoc: Belt_List.getAssoc,
  hasAssocU: Belt_List.hasAssocU,
  hasAssoc: Belt_List.hasAssoc,
  removeAssocU: Belt_List.removeAssocU,
  removeAssoc: Belt_List.removeAssoc,
  setAssocU: Belt_List.setAssocU,
  setAssoc: Belt_List.setAssoc,
  sortU: Belt_List.sortU,
  sort: Belt_List.sort,
  Result: Result
};

var MissingKey = Caml_exceptions.create("Graphql_Schema.StringMap.MissingKey");

var StringMap = {
  empty: Belt_MapString.empty,
  isEmpty: Belt_MapString.isEmpty,
  has: Belt_MapString.has,
  cmpU: Belt_MapString.cmpU,
  cmp: Belt_MapString.cmp,
  eqU: Belt_MapString.eqU,
  eq: Belt_MapString.eq,
  findFirstByU: Belt_MapString.findFirstByU,
  findFirstBy: Belt_MapString.findFirstBy,
  forEachU: Belt_MapString.forEachU,
  forEach: Belt_MapString.forEach,
  reduceU: Belt_MapString.reduceU,
  reduce: Belt_MapString.reduce,
  everyU: Belt_MapString.everyU,
  every: Belt_MapString.every,
  someU: Belt_MapString.someU,
  some: Belt_MapString.some,
  size: Belt_MapString.size,
  toList: Belt_MapString.toList,
  toArray: Belt_MapString.toArray,
  fromArray: Belt_MapString.fromArray,
  keysToArray: Belt_MapString.keysToArray,
  valuesToArray: Belt_MapString.valuesToArray,
  minKey: Belt_MapString.minKey,
  minKeyUndefined: Belt_MapString.minKeyUndefined,
  maxKey: Belt_MapString.maxKey,
  maxKeyUndefined: Belt_MapString.maxKeyUndefined,
  minimum: Belt_MapString.minimum,
  minUndefined: Belt_MapString.minUndefined,
  maximum: Belt_MapString.maximum,
  maxUndefined: Belt_MapString.maxUndefined,
  get: Belt_MapString.get,
  getUndefined: Belt_MapString.getUndefined,
  getWithDefault: Belt_MapString.getWithDefault,
  getExn: Belt_MapString.getExn,
  checkInvariantInternal: Belt_MapString.checkInvariantInternal,
  remove: Belt_MapString.remove,
  removeMany: Belt_MapString.removeMany,
  set: Belt_MapString.set,
  updateU: Belt_MapString.updateU,
  update: Belt_MapString.update,
  mergeU: Belt_MapString.mergeU,
  merge: Belt_MapString.merge,
  mergeMany: Belt_MapString.mergeMany,
  keepU: Belt_MapString.keepU,
  keep: Belt_MapString.keep,
  partitionU: Belt_MapString.partitionU,
  partition: Belt_MapString.partition,
  split: Belt_MapString.split,
  mapU: Belt_MapString.mapU,
  map: Belt_MapString.map,
  mapWithKeyU: Belt_MapString.mapWithKeyU,
  mapWithKey: Belt_MapString.mapWithKey,
  MissingKey: MissingKey
};

var StringSet = $$Set.Make({
      compare: $$String.compare
    });

function id(x) {
  return x;
}

function Make(Io) {
  var $$return = Io.$$return;
  var bind = Io.bind;
  var ok = function (x) {
    return Curry._1($$return, /* Ok */Block.__(0, [x]));
  };
  var error = function (x) {
    return Curry._1($$return, /* Error */Block.__(1, [x]));
  };
  var map = function (x, f) {
    return Curry._2(bind, x, (function (x$prime) {
                  return Curry._1($$return, Curry._1(f, x$prime));
                }));
  };
  var all$1 = function (param) {
    if (param) {
      var x = param[0];
      return Curry._2(bind, all$1(param[1]), (function (xs$prime) {
                    return map(x, (function (x$prime) {
                                  return /* :: */[
                                          x$prime,
                                          xs$prime
                                        ];
                                }));
                  }));
    } else {
      return Curry._1($$return, /* [] */0);
    }
  };
  var bind$1 = function (x, f) {
    return Curry._2(bind, x, (function (err) {
                  if (err.tag) {
                    return Curry._1($$return, err);
                  } else {
                    return Curry._1(f, err[0]);
                  }
                }));
  };
  var mapError = function (x, f) {
    return map(x, (function (ok) {
                  if (ok.tag) {
                    return /* Error */Block.__(1, [Curry._1(f, ok[0])]);
                  } else {
                    return ok;
                  }
                }));
  };
  var map$1 = function (x, f) {
    return map(x, (function (err) {
                  if (err.tag) {
                    return err;
                  } else {
                    return /* Ok */Block.__(0, [Curry._1(f, err[0])]);
                  }
                }));
  };
  var Result = {
    bind: bind$1,
    mapError: mapError,
    map: map$1,
    let_: bind$1
  };
  var mapSerial = function ($staropt$star, list, f) {
    var memo = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    if (list) {
      var xs = list[1];
      return Curry._2(bind, Curry._1(f, list[0]), (function (x$prime) {
                    return mapSerial(/* :: */[
                                x$prime,
                                memo
                              ], xs, f);
                  }));
    } else {
      return Curry._1(Io.$$return, Belt_List.reverse(memo));
    }
  };
  var mapParalell = function (list, f) {
    return all$1(Belt_List.map(list, f));
  };
  var Io$1 = {
    $$return: $$return,
    bind: bind,
    ok: ok,
    error: error,
    map: map,
    all: all$1,
    Result: Result,
    mapSerial: mapSerial,
    mapParalell: mapParalell,
    let_: bind
  };
  var arg = function (description, name, typ) {
    return /* Arg */Block.__(0, [{
                name: name,
                description: description,
                typ: typ
              }]);
  };
  var defaultArg = function (description, $$default, name, typ) {
    return /* DefaultArg */Block.__(1, [{
                name: name,
                description: description,
                typ: typ,
                default: $$default
              }]);
  };
  var string = /* Scalar */Block.__(0, [{
        name: "String",
        description: undefined,
        parse: (function (input) {
            if (typeof input === "number" || input[0] !== -976970511) {
              return /* Error */Block.__(1, ["Invalid string"]);
            } else {
              return /* Ok */Block.__(0, [input[1]]);
            }
          })
      }]);
  var $$int = /* Scalar */Block.__(0, [{
        name: "Int",
        description: undefined,
        parse: (function (input) {
            if (typeof input === "number" || input[0] !== 3654863) {
              return /* Error */Block.__(1, ["Invalid integer"]);
            } else {
              return /* Ok */Block.__(0, [input[1]]);
            }
          })
      }]);
  var $$float = /* Scalar */Block.__(0, [{
        name: "Float",
        description: undefined,
        parse: (function (input) {
            if (typeof input === "number" || input[0] !== 365180284) {
              return /* Error */Block.__(1, ["Invalid float"]);
            } else {
              return /* Ok */Block.__(0, [input[1]]);
            }
          })
      }]);
  var $$boolean = /* Scalar */Block.__(0, [{
        name: "Boolean",
        description: undefined,
        parse: (function (input) {
            if (typeof input === "number" || input[0] !== -883944824) {
              return /* Error */Block.__(1, ["Invalid boolean"]);
            } else {
              return /* Ok */Block.__(0, [input[1]]);
            }
          })
      }]);
  var list = function (a) {
    return /* List */Block.__(3, [a]);
  };
  var nonnull = function (a) {
    return /* NonNull */Block.__(4, [a]);
  };
  var Arg = {
    arg: arg,
    defaultArg: defaultArg,
    string: string,
    $$int: $$int,
    $$float: $$float,
    $$boolean: $$boolean,
    list: list,
    nonnull: nonnull
  };
  var skipDirective = /* Directive */[{
      name: "skip",
      description: "Directs the executor to skip this field or fragment when the `if` argument is true.",
      locations: /* :: */[
        /* Field */331416730,
        /* :: */[
          /* FragmentSpread */178513539,
          /* :: */[
            /* InlineFragment */-185336983,
            /* [] */0
          ]
        ]
      ],
      args: /* :: */[
        arg("Skipped when true.", "if", /* NonNull */Block.__(4, [$$boolean])),
        /* [] */0
      ],
      resolve: (function (param) {
          if (param) {
            return /* Skip */925778591;
          } else {
            return /* Include */524822024;
          }
        })
    }];
  var includeDirective = /* Directive */[{
      name: "include",
      description: "Directs the executor to include this field or fragment only when the `if` argument is true.",
      locations: /* :: */[
        /* Field */331416730,
        /* :: */[
          /* FragmentSpread */178513539,
          /* :: */[
            /* InlineFragment */-185336983,
            /* [] */0
          ]
        ]
      ],
      args: /* :: */[
        arg("Included when true.", "if", /* NonNull */Block.__(4, [$$boolean])),
        /* [] */0
      ],
      resolve: (function (param) {
          if (param) {
            return /* Include */524822024;
          } else {
            return /* Skip */925778591;
          }
        })
    }];
  var makeEnum = function (name, description, values) {
    return {
            argTyp: /* Enum */Block.__(1, [{
                  name: name,
                  description: description,
                  values: values
                }]),
            fieldType: /* Enum */Block.__(1, [{
                  name: name,
                  description: description,
                  values: values
                }])
          };
  };
  var enumValue = function (description, $staropt$star, value, name) {
    var deprecated = $staropt$star !== undefined ? $staropt$star : /* NotDeprecated */0;
    return {
            name: name,
            description: description,
            deprecated: deprecated,
            value: value
          };
  };
  var obj = function (description, $staropt$star, fields, name) {
    var $$implements = $staropt$star !== undefined ? $staropt$star : ({
          contents: /* [] */0
        });
    var self = [];
    Caml_obj.caml_update_dummy(self, /* Object */Block.__(3, [{
              name: name,
              description: description,
              fields: Caml_obj.caml_lazy_make((function (param) {
                      return Curry._1(fields, self);
                    })),
              abstracts: $$implements
            }]));
    return self;
  };
  var field = function (description, $staropt$star, args, resolve, name, typ) {
    var deprecated = $staropt$star !== undefined ? $staropt$star : /* NotDeprecated */0;
    return /* Field */[{
              name: name,
              description: description,
              deprecated: deprecated,
              typ: typ,
              args: args,
              resolve: resolve,
              lift: ok
            }];
  };
  var async_field = function (description, $staropt$star, args, resolve, name, typ) {
    var deprecated = $staropt$star !== undefined ? $staropt$star : /* NotDeprecated */0;
    return /* Field */[{
              name: name,
              description: description,
              deprecated: deprecated,
              typ: typ,
              args: args,
              resolve: resolve,
              lift: id
            }];
  };
  var abstractField = function (description, $staropt$star, args, name, typ) {
    var deprecated = $staropt$star !== undefined ? $staropt$star : /* NotDeprecated */0;
    return /* AbstractField */[/* Field */[{
                name: name,
                description: description,
                deprecated: deprecated,
                typ: typ,
                args: args,
                resolve: /* () */0,
                lift: ok
              }]];
  };
  var union = function (description, name) {
    return /* Abstract */Block.__(4, [{
                name: name,
                description: description,
                types: /* [] */0,
                kind: /* Union */974443759
              }]);
  };
  var $$interface = function (description, fields, name) {
    var t = [];
    Caml_obj.caml_update_dummy(t, /* Abstract */Block.__(4, [{
              name: name,
              description: description,
              types: /* [] */0,
              kind: /* `Interface */[
                -609414759,
                Caml_obj.caml_lazy_make((function (param) {
                        return Curry._1(fields, t);
                      }))
              ]
            }]));
    return t;
  };
  var addType = function (abstractType, typ) {
    if (abstractType.tag === /* Abstract */4 && typ.tag === /* Object */3) {
      var o = typ[0];
      var a = abstractType[0];
      a.types = /* :: */[
        /* AnyTyp */Block.__(0, [typ]),
        a.types
      ];
      o.abstracts.contents = /* :: */[
        a,
        o.abstracts.contents
      ];
      return (function (src) {
          return /* AbstractValue */[/* tuple */[
                    typ,
                    src
                  ]];
        });
    } else {
      return Pervasives.invalid_arg("Arguments must be Interface/Union and Object");
    }
  };
  var query = function (fields) {
    return {
            name: "Query",
            description: undefined,
            fields: fields,
            abstracts: {
              contents: /* [] */0
            }
          };
  };
  var mutation = function (fields) {
    return {
            name: "Mutation",
            description: undefined,
            fields: fields,
            abstracts: {
              contents: /* [] */0
            }
          };
  };
  var create = function (mutation, query) {
    return {
            query: query,
            mutation: mutation,
            subscription: undefined
          };
  };
  var string$1 = /* Scalar */Block.__(0, [{
        name: "String",
        description: undefined,
        serialize: (function (str) {
            return /* `String */[
                    -976970511,
                    str
                  ];
          })
      }]);
  var $$int$1 = /* Scalar */Block.__(0, [{
        name: "Int",
        description: undefined,
        serialize: (function ($$int) {
            return /* `Int */[
                    3654863,
                    $$int
                  ];
          })
      }]);
  var $$float$1 = /* Scalar */Block.__(0, [{
        name: "Float",
        description: undefined,
        serialize: (function ($$float) {
            return /* `Float */[
                    365180284,
                    $$float
                  ];
          })
      }]);
  var $$boolean$1 = /* Scalar */Block.__(0, [{
        name: "Boolean",
        description: undefined,
        serialize: (function (bool) {
            return /* `Boolean */[
                    -883944824,
                    bool
                  ];
          })
      }]);
  var list$1 = function (typ) {
    return /* List */Block.__(2, [typ]);
  };
  var nonnull$1 = function (typ) {
    return /* NonNull */Block.__(5, [typ]);
  };
  var unlessVisited = function (param, name, f) {
    var visited = param[1];
    var result = param[0];
    if (Curry._2(StringSet.mem, name, visited)) {
      return /* tuple */[
              result,
              visited
            ];
    } else {
      return Curry._1(f, /* tuple */[
                  result,
                  visited
                ]);
    }
  };
  var types = function (_$staropt$star, _typ) {
    while(true) {
      var typ = _typ;
      var $staropt$star = _$staropt$star;
      var memo = $staropt$star !== undefined ? $staropt$star : /* tuple */[
          /* [] */0,
          StringSet.empty
        ];
      switch (typ.tag | 0) {
        case /* Scalar */0 :
            var s = typ[0];
            return unlessVisited(memo, s.name, (function(typ,s){
                      return function (param) {
                        return /* tuple */[
                                /* :: */[
                                  /* AnyTyp */Block.__(0, [typ]),
                                  param[0]
                                ],
                                Curry._2(StringSet.add, s.name, param[1])
                              ];
                      }
                      }(typ,s)));
        case /* Enum */1 :
            var e = typ[0];
            return unlessVisited(memo, e.name, (function(typ,e){
                      return function (param) {
                        return /* tuple */[
                                /* :: */[
                                  /* AnyTyp */Block.__(0, [typ]),
                                  param[0]
                                ],
                                Curry._2(StringSet.add, e.name, param[1])
                              ];
                      }
                      }(typ,e)));
        case /* Object */3 :
            var o = typ[0];
            return unlessVisited(memo, o.name, (function(typ,o){
                      return function (param) {
                        var result$prime_000 = /* AnyTyp */Block.__(0, [typ]);
                        var result$prime_001 = param[0];
                        var result$prime = /* :: */[
                          result$prime_000,
                          result$prime_001
                        ];
                        var visited$prime = Curry._2(StringSet.add, o.name, param[1]);
                        var reducer = function (memo, param) {
                          var f = param[0];
                          var memo$prime = types(memo, f.typ);
                          return arg_list_types(memo$prime, f.args);
                        };
                        return Belt_List.reduceReverse(CamlinternalLazy.force(o.fields), /* tuple */[
                                    result$prime,
                                    visited$prime
                                  ], reducer);
                      }
                      }(typ,o)));
        case /* Abstract */4 :
            var a = typ[0];
            return unlessVisited(memo, a.name, (function(typ,a){
                      return function (param) {
                        var result$prime_000 = /* AnyTyp */Block.__(0, [typ]);
                        var result$prime_001 = param[0];
                        var result$prime = /* :: */[
                          result$prime_000,
                          result$prime_001
                        ];
                        var visited$prime = Curry._2(StringSet.add, a.name, param[1]);
                        return Belt_List.reduceReverse(a.types, /* tuple */[
                                    result$prime,
                                    visited$prime
                                  ], (function (memo, typ) {
                                      if (typ.tag) {
                                        return Pervasives.failwith("Abstracts can't have argument types");
                                      } else {
                                        return types(memo, typ[0]);
                                      }
                                    }));
                      }
                      }(typ,a)));
        case /* List */2 :
        case /* NonNull */5 :
            _typ = typ[0];
            _$staropt$star = memo;
            continue ;
        
      }
    };
  };
  var arg_types = function (memo, _argtyp) {
    while(true) {
      var argtyp = _argtyp;
      switch (argtyp.tag | 0) {
        case /* Scalar */0 :
            var s = argtyp[0];
            return unlessVisited(memo, s.name, (function(argtyp,s){
                      return function (param) {
                        return /* tuple */[
                                /* :: */[
                                  /* AnyArgTyp */Block.__(1, [argtyp]),
                                  param[0]
                                ],
                                Curry._2(StringSet.add, s.name, param[1])
                              ];
                      }
                      }(argtyp,s)));
        case /* Enum */1 :
            var e = argtyp[0];
            return unlessVisited(memo, e.name, (function(argtyp,e){
                      return function (param) {
                        return /* tuple */[
                                /* :: */[
                                  /* AnyArgTyp */Block.__(1, [argtyp]),
                                  param[0]
                                ],
                                Curry._2(StringSet.add, e.name, param[1])
                              ];
                      }
                      }(argtyp,e)));
        case /* InputObject */2 :
            var o = argtyp[0];
            return unlessVisited(memo, o.name, (function(argtyp,o){
                      return function (param) {
                        var memo$prime_000 = /* :: */[
                          /* AnyArgTyp */Block.__(1, [argtyp]),
                          param[0]
                        ];
                        var memo$prime_001 = Curry._2(StringSet.add, o.name, param[1]);
                        var memo$prime = /* tuple */[
                          memo$prime_000,
                          memo$prime_001
                        ];
                        return arg_list_types(memo$prime, o.fields);
                      }
                      }(argtyp,o)));
        case /* List */3 :
        case /* NonNull */4 :
            _argtyp = argtyp[0];
            continue ;
        
      }
    };
  };
  var arg_list_types = function (_memo, _arglist) {
    while(true) {
      var arglist = _arglist;
      var memo = _memo;
      if (arglist) {
        var memo$prime = arg_types(memo, arglist[0][0].typ);
        _arglist = arglist[1];
        _memo = memo$prime;
        continue ;
      } else {
        return memo;
      }
    };
  };
  var args_to_list = function (_$staropt$star, _arglist) {
    while(true) {
      var arglist = _arglist;
      var $staropt$star = _$staropt$star;
      var memo = $staropt$star !== undefined ? $staropt$star : /* [] */0;
      if (arglist) {
        var arg = /* AnyArg */[arglist[0]];
        var memo$prime = /* :: */[
          arg,
          memo
        ];
        _arglist = arglist[1];
        _$staropt$star = memo$prime;
        continue ;
      } else {
        return memo;
      }
    };
  };
  var no_abstracts = {
    contents: /* [] */0
  };
  var __type_kind = /* Enum */Block.__(1, [{
        name: "__TypeKind",
        description: undefined,
        values: /* :: */[
          {
            name: "SCALAR",
            description: undefined,
            deprecated: /* NotDeprecated */0,
            value: /* Scalar */-256222388
          },
          /* :: */[
            {
              name: "OBJECT",
              description: undefined,
              deprecated: /* NotDeprecated */0,
              value: /* Object */-908856609
            },
            /* :: */[
              {
                name: "INTERFACE",
                description: undefined,
                deprecated: /* NotDeprecated */0,
                value: /* Interface */-609414759
              },
              /* :: */[
                {
                  name: "UNION",
                  description: undefined,
                  deprecated: /* NotDeprecated */0,
                  value: /* Union */974443759
                },
                /* :: */[
                  {
                    name: "ENUM",
                    description: undefined,
                    deprecated: /* NotDeprecated */0,
                    value: /* Enum */770676513
                  },
                  /* :: */[
                    {
                      name: "INPUT_OBJECT",
                      description: undefined,
                      deprecated: /* NotDeprecated */0,
                      value: /* InputObject */-291114423
                    },
                    /* :: */[
                      {
                        name: "LIST",
                        description: undefined,
                        deprecated: /* NotDeprecated */0,
                        value: /* List */848054398
                      },
                      /* :: */[
                        {
                          name: "NON_NULL",
                          description: undefined,
                          deprecated: /* NotDeprecated */0,
                          value: /* NonNull */388158996
                        },
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      }]);
  var __enumValue = /* Object */Block.__(3, [{
        name: "__EnumValue",
        description: undefined,
        fields: Caml_obj.caml_lazy_make((function (param) {
                return /* :: */[
                        /* Field */[{
                            name: "name",
                            description: undefined,
                            deprecated: /* NotDeprecated */0,
                            typ: /* NonNull */Block.__(5, [string$1]),
                            args: /* [] */0,
                            resolve: (function (param, param$1) {
                                return param$1[0].name;
                              }),
                            lift: ok
                          }],
                        /* :: */[
                          /* Field */[{
                              name: "description",
                              description: undefined,
                              deprecated: /* NotDeprecated */0,
                              typ: string$1,
                              args: /* [] */0,
                              resolve: (function (param, param$1) {
                                  return param$1[0].description;
                                }),
                              lift: ok
                            }],
                          /* :: */[
                            /* Field */[{
                                name: "isDeprecated",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: /* NonNull */Block.__(5, [$$boolean$1]),
                                args: /* [] */0,
                                resolve: (function (param, param$1) {
                                    return param$1[0].deprecated !== /* NotDeprecated */0;
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "deprecationReason",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: string$1,
                                  args: /* [] */0,
                                  resolve: (function (param, param$1) {
                                      var match = param$1[0].deprecated;
                                      if (match) {
                                        return match[0];
                                      }
                                      
                                    }),
                                  lift: ok
                                }],
                              /* [] */0
                            ]
                          ]
                        ]
                      ];
              })),
        abstracts: no_abstracts
      }]);
  var __input_value = [];
  var __type = [];
  var __field = [];
  Caml_obj.caml_update_dummy(__input_value, /* Object */Block.__(3, [{
            name: "__InputValue",
            description: undefined,
            fields: Caml_obj.caml_lazy_make((function (param) {
                    return /* :: */[
                            /* Field */[{
                                name: "name",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: /* NonNull */Block.__(5, [string$1]),
                                args: /* [] */0,
                                resolve: (function (param, param$1) {
                                    return param$1[0][0].name;
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "description",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: string$1,
                                  args: /* [] */0,
                                  resolve: (function (param, param$1) {
                                      return param$1[0][0].description;
                                    }),
                                  lift: ok
                                }],
                              /* :: */[
                                /* Field */[{
                                    name: "type",
                                    description: undefined,
                                    deprecated: /* NotDeprecated */0,
                                    typ: /* NonNull */Block.__(5, [__type]),
                                    args: /* [] */0,
                                    resolve: (function (param, param$1) {
                                        return /* AnyArgTyp */Block.__(1, [param$1[0][0].typ]);
                                      }),
                                    lift: ok
                                  }],
                                /* :: */[
                                  /* Field */[{
                                      name: "defaultValue",
                                      description: undefined,
                                      deprecated: /* NotDeprecated */0,
                                      typ: string$1,
                                      args: /* [] */0,
                                      resolve: (function (param, param$1) {
                                          return ;
                                        }),
                                      lift: ok
                                    }],
                                  /* [] */0
                                ]
                              ]
                            ]
                          ];
                  })),
            abstracts: no_abstracts
          }]));
  Caml_obj.caml_update_dummy(__type, /* Object */Block.__(3, [{
            name: "__Type",
            description: undefined,
            fields: Caml_obj.caml_lazy_make((function (param) {
                    return /* :: */[
                            /* Field */[{
                                name: "kind",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: /* NonNull */Block.__(5, [__type_kind]),
                                args: /* [] */0,
                                resolve: (function (param, t) {
                                    if (t.tag) {
                                      switch (t[0].tag | 0) {
                                        case /* Scalar */0 :
                                            return /* Scalar */-256222388;
                                        case /* Enum */1 :
                                            return /* Enum */770676513;
                                        case /* InputObject */2 :
                                            return /* InputObject */-291114423;
                                        case /* List */3 :
                                            return /* List */848054398;
                                        case /* NonNull */4 :
                                            return /* NonNull */388158996;
                                        
                                      }
                                    } else {
                                      var match = t[0];
                                      switch (match.tag | 0) {
                                        case /* Scalar */0 :
                                            return /* Scalar */-256222388;
                                        case /* Enum */1 :
                                            return /* Enum */770676513;
                                        case /* List */2 :
                                            return /* List */848054398;
                                        case /* Object */3 :
                                            return /* Object */-908856609;
                                        case /* Abstract */4 :
                                            if (typeof match[0].kind === "number") {
                                              return /* Union */974443759;
                                            } else {
                                              return /* Interface */-609414759;
                                            }
                                        case /* NonNull */5 :
                                            return /* NonNull */388158996;
                                        
                                      }
                                    }
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "ofType",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: __type,
                                  args: /* [] */0,
                                  resolve: (function (param, t) {
                                      if (t.tag) {
                                        var match = t[0];
                                        switch (match.tag | 0) {
                                          case /* List */3 :
                                          case /* NonNull */4 :
                                              return /* AnyArgTyp */Block.__(1, [match[0]]);
                                          default:
                                            return ;
                                        }
                                      } else {
                                        var match$1 = t[0];
                                        switch (match$1.tag | 0) {
                                          case /* List */2 :
                                          case /* NonNull */5 :
                                              return /* AnyTyp */Block.__(0, [match$1[0]]);
                                          default:
                                            return ;
                                        }
                                      }
                                    }),
                                  lift: ok
                                }],
                              /* :: */[
                                /* Field */[{
                                    name: "name",
                                    description: undefined,
                                    deprecated: /* NotDeprecated */0,
                                    typ: string$1,
                                    args: /* [] */0,
                                    resolve: (function (param, t) {
                                        if (t.tag) {
                                          var match = t[0];
                                          switch (match.tag | 0) {
                                            case /* List */3 :
                                            case /* NonNull */4 :
                                                return ;
                                            default:
                                              return match[0].name;
                                          }
                                        } else {
                                          var match$1 = t[0];
                                          switch (match$1.tag | 0) {
                                            case /* List */2 :
                                            case /* NonNull */5 :
                                                return ;
                                            default:
                                              return match$1[0].name;
                                          }
                                        }
                                      }),
                                    lift: ok
                                  }],
                                /* :: */[
                                  /* Field */[{
                                      name: "description",
                                      description: undefined,
                                      deprecated: /* NotDeprecated */0,
                                      typ: string$1,
                                      args: /* [] */0,
                                      resolve: (function (param, t) {
                                          if (t.tag) {
                                            var match = t[0];
                                            switch (match.tag | 0) {
                                              case /* List */3 :
                                              case /* NonNull */4 :
                                                  return ;
                                              default:
                                                return match[0].description;
                                            }
                                          } else {
                                            var match$1 = t[0];
                                            switch (match$1.tag | 0) {
                                              case /* List */2 :
                                              case /* NonNull */5 :
                                                  return ;
                                              default:
                                                return match$1[0].description;
                                            }
                                          }
                                        }),
                                      lift: ok
                                    }],
                                  /* :: */[
                                    /* Field */[{
                                        name: "fields",
                                        description: undefined,
                                        deprecated: /* NotDeprecated */0,
                                        typ: /* List */Block.__(2, [/* NonNull */Block.__(5, [__field])]),
                                        args: /* [] */0,
                                        resolve: (function (param, t) {
                                            if (t.tag) {
                                              var match = t[0];
                                              if (match.tag === /* InputObject */2) {
                                                var arg_list = args_to_list(undefined, match[0].fields);
                                                return Belt_List.map(arg_list, (function (param) {
                                                              return /* AnyArgField */Block.__(1, [param[0]]);
                                                            }));
                                              } else {
                                                return ;
                                              }
                                            } else {
                                              var match$1 = t[0];
                                              switch (match$1.tag | 0) {
                                                case /* Object */3 :
                                                    return Belt_List.map(CamlinternalLazy.force(match$1[0].fields), (function (f) {
                                                                  return /* AnyField */Block.__(0, [f]);
                                                                }));
                                                case /* Abstract */4 :
                                                    var match$2 = match$1[0].kind;
                                                    if (typeof match$2 === "number" || match$2[0] !== -609414759) {
                                                      return ;
                                                    } else {
                                                      return Belt_List.map(CamlinternalLazy.force(match$2[1]), (function (param) {
                                                                    return /* AnyField */Block.__(0, [param[0]]);
                                                                  }));
                                                    }
                                                default:
                                                  return ;
                                              }
                                            }
                                          }),
                                        lift: ok
                                      }],
                                    /* :: */[
                                      /* Field */[{
                                          name: "interfaces",
                                          description: undefined,
                                          deprecated: /* NotDeprecated */0,
                                          typ: /* List */Block.__(2, [/* NonNull */Block.__(5, [__type])]),
                                          args: /* [] */0,
                                          resolve: (function (param, t) {
                                              if (t.tag) {
                                                return ;
                                              } else {
                                                var match = t[0];
                                                if (match.tag === /* Object */3) {
                                                  var interfaces = Belt_List.keep(match[0].abstracts.contents, (function (param) {
                                                          var match = param.kind;
                                                          if (typeof match === "number") {
                                                            return false;
                                                          } else {
                                                            return match[0] === -609414759;
                                                          }
                                                        }));
                                                  return Belt_List.map(interfaces, (function (i) {
                                                                return /* AnyTyp */Block.__(0, [/* Abstract */Block.__(4, [i])]);
                                                              }));
                                                } else {
                                                  return ;
                                                }
                                              }
                                            }),
                                          lift: ok
                                        }],
                                      /* :: */[
                                        /* Field */[{
                                            name: "possibleTypes",
                                            description: undefined,
                                            deprecated: /* NotDeprecated */0,
                                            typ: /* List */Block.__(2, [/* NonNull */Block.__(5, [__type])]),
                                            args: /* [] */0,
                                            resolve: (function (param, t) {
                                                if (t.tag) {
                                                  return ;
                                                } else {
                                                  var match = t[0];
                                                  if (match.tag === /* Abstract */4) {
                                                    return match[0].types;
                                                  } else {
                                                    return ;
                                                  }
                                                }
                                              }),
                                            lift: ok
                                          }],
                                        /* :: */[
                                          /* Field */[{
                                              name: "inputFields",
                                              description: undefined,
                                              deprecated: /* NotDeprecated */0,
                                              typ: /* List */Block.__(2, [/* NonNull */Block.__(5, [__input_value])]),
                                              args: /* [] */0,
                                              resolve: (function (param, t) {
                                                  if (t.tag) {
                                                    var match = t[0];
                                                    if (match.tag === /* InputObject */2) {
                                                      return args_to_list(undefined, match[0].fields);
                                                    } else {
                                                      return ;
                                                    }
                                                  }
                                                  
                                                }),
                                              lift: ok
                                            }],
                                          /* :: */[
                                            /* Field */[{
                                                name: "enumValues",
                                                description: undefined,
                                                deprecated: /* NotDeprecated */0,
                                                typ: /* List */Block.__(2, [/* NonNull */Block.__(5, [__enumValue])]),
                                                args: /* [] */0,
                                                resolve: (function (param, t) {
                                                    if (t.tag) {
                                                      var match = t[0];
                                                      if (match.tag === /* Enum */1) {
                                                        return Belt_List.map(match[0].values, (function (x) {
                                                                      return /* AnyEnumValue */[x];
                                                                    }));
                                                      } else {
                                                        return ;
                                                      }
                                                    } else {
                                                      var match$1 = t[0];
                                                      if (match$1.tag === /* Enum */1) {
                                                        return Belt_List.map(match$1[0].values, (function (x) {
                                                                      return /* AnyEnumValue */[x];
                                                                    }));
                                                      } else {
                                                        return ;
                                                      }
                                                    }
                                                  }),
                                                lift: ok
                                              }],
                                            /* [] */0
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ];
                  })),
            abstracts: no_abstracts
          }]));
  Caml_obj.caml_update_dummy(__field, /* Object */Block.__(3, [{
            name: "__Field",
            description: undefined,
            fields: Caml_obj.caml_lazy_make((function (param) {
                    return /* :: */[
                            /* Field */[{
                                name: "name",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: /* NonNull */Block.__(5, [string$1]),
                                args: /* [] */0,
                                resolve: (function (param, f) {
                                    return f[0][0].name;
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "description",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: string$1,
                                  args: /* [] */0,
                                  resolve: (function (param, f) {
                                      return f[0][0].description;
                                    }),
                                  lift: ok
                                }],
                              /* :: */[
                                /* Field */[{
                                    name: "args",
                                    description: undefined,
                                    deprecated: /* NotDeprecated */0,
                                    typ: /* NonNull */Block.__(5, [/* List */Block.__(2, [/* NonNull */Block.__(5, [__input_value])])]),
                                    args: /* [] */0,
                                    resolve: (function (param, f) {
                                        if (f.tag) {
                                          return /* [] */0;
                                        } else {
                                          return args_to_list(undefined, f[0][0].args);
                                        }
                                      }),
                                    lift: ok
                                  }],
                                /* :: */[
                                  /* Field */[{
                                      name: "type",
                                      description: undefined,
                                      deprecated: /* NotDeprecated */0,
                                      typ: /* NonNull */Block.__(5, [__type]),
                                      args: /* [] */0,
                                      resolve: (function (param, f) {
                                          if (f.tag) {
                                            return /* AnyArgTyp */Block.__(1, [f[0][0].typ]);
                                          } else {
                                            return /* AnyTyp */Block.__(0, [f[0][0].typ]);
                                          }
                                        }),
                                      lift: ok
                                    }],
                                  /* :: */[
                                    /* Field */[{
                                        name: "isDeprecated",
                                        description: undefined,
                                        deprecated: /* NotDeprecated */0,
                                        typ: /* NonNull */Block.__(5, [$$boolean$1]),
                                        args: /* [] */0,
                                        resolve: (function (param, f) {
                                            if (f.tag || !f[0][0].deprecated) {
                                              return false;
                                            } else {
                                              return true;
                                            }
                                          }),
                                        lift: ok
                                      }],
                                    /* :: */[
                                      /* Field */[{
                                          name: "deprecationReason",
                                          description: undefined,
                                          deprecated: /* NotDeprecated */0,
                                          typ: string$1,
                                          args: /* [] */0,
                                          resolve: (function (param, f) {
                                              if (f.tag) {
                                                return ;
                                              } else {
                                                var match = f[0][0].deprecated;
                                                if (match) {
                                                  return match[0];
                                                } else {
                                                  return ;
                                                }
                                              }
                                            }),
                                          lift: ok
                                        }],
                                      /* [] */0
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ];
                  })),
            abstracts: no_abstracts
          }]));
  var __directiveLocation = /* Enum */Block.__(1, [{
        name: "__DirectiveLocation",
        description: undefined,
        values: /* :: */[
          {
            name: "QUERY",
            description: undefined,
            deprecated: /* NotDeprecated */0,
            value: /* Query */-250086680
          },
          /* :: */[
            {
              name: "MUTATION",
              description: undefined,
              deprecated: /* NotDeprecated */0,
              value: /* Mutation */1035765577
            },
            /* :: */[
              {
                name: "SUBSCRIPTION",
                description: undefined,
                deprecated: /* NotDeprecated */0,
                value: /* Subscription */-32289987
              },
              /* :: */[
                {
                  name: "FIELD",
                  description: undefined,
                  deprecated: /* NotDeprecated */0,
                  value: /* Field */331416730
                },
                /* :: */[
                  {
                    name: "FragmentDefinition",
                    description: undefined,
                    deprecated: /* NotDeprecated */0,
                    value: /* FragmentDefinition */854213027
                  },
                  /* :: */[
                    {
                      name: "FragmentSpread",
                      description: undefined,
                      deprecated: /* NotDeprecated */0,
                      value: /* FragmentSpread */178513539
                    },
                    /* :: */[
                      {
                        name: "InlineFragment",
                        description: undefined,
                        deprecated: /* NotDeprecated */0,
                        value: /* InlineFragment */-185336983
                      },
                      /* :: */[
                        {
                          name: "VariableDefinition",
                          description: undefined,
                          deprecated: /* NotDeprecated */0,
                          value: /* VariableDefinition */154776335
                        },
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      }]);
  var __directive = /* Object */Block.__(3, [{
        name: "__Directive",
        description: undefined,
        fields: Caml_obj.caml_lazy_make((function (param) {
                return /* :: */[
                        /* Field */[{
                            name: "name",
                            description: undefined,
                            deprecated: /* NotDeprecated */0,
                            typ: /* NonNull */Block.__(5, [string$1]),
                            args: /* [] */0,
                            resolve: (function (param, param$1) {
                                return param$1[0].name;
                              }),
                            lift: ok
                          }],
                        /* :: */[
                          /* Field */[{
                              name: "description",
                              description: undefined,
                              deprecated: /* NotDeprecated */0,
                              typ: string$1,
                              args: /* [] */0,
                              resolve: (function (param, param$1) {
                                  return param$1[0].description;
                                }),
                              lift: ok
                            }],
                          /* :: */[
                            /* Field */[{
                                name: "locations",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: /* NonNull */Block.__(5, [/* List */Block.__(2, [/* NonNull */Block.__(5, [__directiveLocation])])]),
                                args: /* [] */0,
                                resolve: (function (param, param$1) {
                                    return param$1[0].locations;
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "args",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: /* NonNull */Block.__(5, [/* List */Block.__(2, [/* NonNull */Block.__(5, [__input_value])])]),
                                  args: /* [] */0,
                                  resolve: (function (param, param$1) {
                                      return args_to_list(undefined, param$1[0].args);
                                    }),
                                  lift: ok
                                }],
                              /* [] */0
                            ]
                          ]
                        ]
                      ];
              })),
        abstracts: no_abstracts
      }]);
  var __schema = /* Object */Block.__(3, [{
        name: "__Schema",
        description: undefined,
        fields: Caml_obj.caml_lazy_make((function (param) {
                return /* :: */[
                        /* Field */[{
                            name: "types",
                            description: undefined,
                            deprecated: /* NotDeprecated */0,
                            typ: /* NonNull */Block.__(5, [/* List */Block.__(2, [/* NonNull */Block.__(5, [__type])])]),
                            args: /* [] */0,
                            resolve: (function (param, s) {
                                return Belt_List.reduceReverse(/* :: */[
                                              s.query,
                                              /* :: */[
                                                s.mutation,
                                                /* [] */0
                                              ]
                                            ], /* tuple */[
                                              /* [] */0,
                                              StringSet.empty
                                            ], (function (memo, op) {
                                                if (op !== undefined) {
                                                  return types(memo, /* Object */Block.__(3, [op]));
                                                } else {
                                                  return memo;
                                                }
                                              }))[0];
                              }),
                            lift: ok
                          }],
                        /* :: */[
                          /* Field */[{
                              name: "queryType",
                              description: undefined,
                              deprecated: /* NotDeprecated */0,
                              typ: /* NonNull */Block.__(5, [__type]),
                              args: /* [] */0,
                              resolve: (function (param, s) {
                                  return /* AnyTyp */Block.__(0, [/* Object */Block.__(3, [s.query])]);
                                }),
                              lift: ok
                            }],
                          /* :: */[
                            /* Field */[{
                                name: "mutationType",
                                description: undefined,
                                deprecated: /* NotDeprecated */0,
                                typ: __type,
                                args: /* [] */0,
                                resolve: (function (param, s) {
                                    return Belt_Option.map(s.mutation, (function (mut) {
                                                  return /* AnyTyp */Block.__(0, [/* Object */Block.__(3, [mut])]);
                                                }));
                                  }),
                                lift: ok
                              }],
                            /* :: */[
                              /* Field */[{
                                  name: "subscriptionType",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: __type,
                                  args: /* [] */0,
                                  resolve: (function (param, s) {
                                      return Belt_Option.map(s.subscription, (function (subs) {
                                                    return /* AnyTyp */Block.__(0, [/* Object */Block.__(3, [subs])]);
                                                  }));
                                    }),
                                  lift: ok
                                }],
                              /* :: */[
                                /* Field */[{
                                    name: "directives",
                                    description: undefined,
                                    deprecated: /* NotDeprecated */0,
                                    typ: /* NonNull */Block.__(5, [/* List */Block.__(2, [/* NonNull */Block.__(5, [__directive])])]),
                                    args: /* [] */0,
                                    resolve: (function (param, param$1) {
                                        return /* [] */0;
                                      }),
                                    lift: ok
                                  }],
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ];
              })),
        abstracts: no_abstracts
      }]);
  var addSchemaField = function (schema) {
    var init = schema.query;
    return {
            query: {
              name: init.name,
              description: init.description,
              fields: Caml_obj.caml_lazy_make((function (param) {
                      return /* :: */[
                              /* Field */[{
                                  name: "__schema",
                                  description: undefined,
                                  deprecated: /* NotDeprecated */0,
                                  typ: /* NonNull */Block.__(5, [__schema]),
                                  args: /* [] */0,
                                  resolve: (function (param, param$1) {
                                      return schema;
                                    }),
                                  lift: ok
                                }],
                              CamlinternalLazy.force(schema.query.fields)
                            ];
                    })),
              abstracts: init.abstracts
            },
            mutation: schema.mutation,
            subscription: schema.subscription
          };
  };
  var Introspection = {
    unlessVisited: unlessVisited,
    types: types,
    arg_types: arg_types,
    arg_list_types: arg_list_types,
    args_to_list: args_to_list,
    no_abstracts: no_abstracts,
    __type_kind: __type_kind,
    __enumValue: __enumValue,
    __input_value: __input_value,
    __type: __type,
    __field: __field,
    __directiveLocation: __directiveLocation,
    __directive: __directive,
    __schema: __schema,
    addSchemaField: addSchemaField
  };
  var valueToConstValue = function (variableMap, i) {
    if (typeof i === "number") {
      return /* Null */870828711;
    } else {
      var variant = i[0];
      if (variant !== 3850876) {
        if (variant >= -1027682723) {
          if (variant >= 848054398) {
            return /* `List */[
                    848054398,
                    Belt_List.map(i[1], (function (param) {
                            return valueToConstValue(variableMap, param);
                          }))
                  ];
          } else {
            return i;
          }
        } else {
          var match = Belt_MapString.get(variableMap, i[1]);
          if (match !== undefined) {
            return match;
          } else {
            return /* Null */870828711;
          }
        }
      } else {
        var props$prime = Belt_List.map(i[1], (function (param) {
                return /* tuple */[
                        param[0],
                        valueToConstValue(variableMap, param[1])
                      ];
              }));
        return /* `Map */[
                3850876,
                props$prime
              ];
      }
    }
  };
  var stringOfConstValue = function (param) {
    if (typeof param === "number") {
      return "null";
    } else {
      var variant = param[0];
      if (variant >= 3850876) {
        if (variant >= 770676513) {
          if (variant >= 848054398) {
            var values = Belt_List.map(param[1], stringOfConstValue);
            return Curry._1(Printf.sprintf(/* Format */[
                            /* Char_literal */Block.__(12, [
                                /* "[" */91,
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* Char_literal */Block.__(12, [
                                        /* "]" */93,
                                        /* End_of_format */0
                                      ])
                                  ])
                              ]),
                            "[%s]"
                          ]), $$String.concat(", ", values));
          } else {
            return param[1];
          }
        } else if (variant >= 365180284) {
          return param[1].toString();
        } else {
          var values$1 = Belt_List.map(param[1], (function (param) {
                  return Curry._2(Printf.sprintf(/* Format */[
                                  /* String */Block.__(2, [
                                      /* No_padding */0,
                                      /* String_literal */Block.__(11, [
                                          ": ",
                                          /* String */Block.__(2, [
                                              /* No_padding */0,
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ]),
                                  "%s: %s"
                                ]), param[0], stringOfConstValue(param[1]));
                }));
          return Curry._1(Printf.sprintf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "{" */123,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "}" */125,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "{%s}"
                        ]), $$String.concat(", ", values$1));
        }
      } else if (variant !== -883944824) {
        if (variant >= 3654863) {
          return String(param[1]);
        } else {
          return Curry._1(Printf.sprintf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "\"" */34,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "\"" */34,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "\"%s\""
                        ]), param[1]);
        }
      } else {
        return Pervasives.string_of_bool(param[1]);
      }
    }
  };
  var stringOfArgType = function (param) {
    switch (param.tag | 0) {
      case /* List */3 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* Char_literal */Block.__(12, [
                              /* "[" */91,
                              /* String */Block.__(2, [
                                  /* No_padding */0,
                                  /* Char_literal */Block.__(12, [
                                      /* "]" */93,
                                      /* End_of_format */0
                                    ])
                                ])
                            ]),
                          "[%s]"
                        ]), stringOfArgType(param[0]));
      case /* NonNull */4 :
          return Curry._1(Printf.sprintf(/* Format */[
                          /* String */Block.__(2, [
                              /* No_padding */0,
                              /* Char_literal */Block.__(12, [
                                  /* "!" */33,
                                  /* End_of_format */0
                                ])
                            ]),
                          "%s!"
                        ]), stringOfArgType(param[0]));
      default:
        return Curry._1(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ]),
                        "%s"
                      ]), param[0].name);
    }
  };
  var evalArgError = function ($staropt$star, fieldName, argName, argTyp, value) {
    var fieldType = $staropt$star !== undefined ? $staropt$star : "field";
    var foundStr = value !== undefined ? Curry._1(Printf.sprintf(/* Format */[
                /* String_literal */Block.__(11, [
                    "found ",
                    /* String */Block.__(2, [
                        /* No_padding */0,
                        /* End_of_format */0
                      ])
                  ]),
                "found %s"
              ]), stringOfConstValue(value)) : "but not provided";
    return Curry._5(Printf.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Argument `",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "` of type `",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        "` expected on ",
                                        /* String */Block.__(2, [
                                            /* No_padding */0,
                                            /* String_literal */Block.__(11, [
                                                " `",
                                                /* String */Block.__(2, [
                                                    /* No_padding */0,
                                                    /* String_literal */Block.__(11, [
                                                        "`, ",
                                                        /* String */Block.__(2, [
                                                            /* No_padding */0,
                                                            /* Char_literal */Block.__(12, [
                                                                /* "." */46,
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "Argument `%s` of type `%s` expected on %s `%s`, %s."
                  ]), argName, stringOfArgType(argTyp), fieldType, fieldName, foundStr);
  };
  var evalArgList = function (variableMap, fieldType, fieldName, _arglist, key_values, _f) {
    while(true) {
      var f = _f;
      var arglist = _arglist;
      if (arglist) {
        var match = arglist[0];
        if (match.tag) {
          var arg = match[0];
          var arglist$prime$prime_000 = /* Arg */Block.__(0, [{
                name: arg.name,
                description: arg.description,
                typ: arg.typ
              }]);
          var arglist$prime$prime_001 = arglist[1];
          var arglist$prime$prime = /* :: */[
            arglist$prime$prime_000,
            arglist$prime$prime_001
          ];
          _f = (function(f,arg){
          return function (param) {
            if (param !== undefined) {
              return Curry._1(f, Caml_option.valFromOption(param));
            } else {
              return Curry._1(f, arg.default);
            }
          }
          }(f,arg));
          _arglist = arglist$prime$prime;
          continue ;
        } else {
          var arglist$prime = arglist[1];
          var arg$1 = match[0];
          try {
            var value = Belt_List.getAssoc(key_values, arg$1.name, (function (prim, prim$1) {
                    return prim === prim$1;
                  }));
            var constValue = Belt_Option.map(value, (function (param) {
                    return valueToConstValue(variableMap, param);
                  }));
            return Belt_Result.flatMap(evalArg(variableMap, fieldType, fieldName, arg$1.name, arg$1.typ, constValue), (function(f,arglist$prime){
                      return function (coerced) {
                        return evalArgList(variableMap, fieldType, fieldName, arglist$prime, key_values, Curry._1(f, coerced));
                      }
                      }(f,arglist$prime)));
          }
          catch (raw_exn){
            var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
            if (exn[0] === MissingKey) {
              return /* Error */Block.__(1, [Curry._1(Format.sprintf(/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "Missing variable `",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* Char_literal */Block.__(12, [
                                              /* "`" */96,
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ]),
                                  "Missing variable `%s`"
                                ]), exn[1])]);
            } else {
              throw exn;
            }
          }
        }
      } else {
        return /* Ok */Block.__(0, [f]);
      }
    };
  };
  var evalArg = function (variableMap, fieldType, fieldName, argName, typ, value) {
    switch (typ.tag | 0) {
      case /* Scalar */0 :
          if (value !== undefined) {
            var value$1 = value;
            if (value$1 !== 870828711) {
              var match = Curry._1(typ[0].parse, value$1);
              if (match.tag) {
                return /* Error */Block.__(1, [evalArgError(fieldType, fieldName, argName, typ, value$1)]);
              } else {
                return /* Ok */Block.__(0, [Caml_option.some(match[0])]);
              }
            } else {
              return /* Ok */Block.__(0, [undefined]);
            }
          } else {
            return /* Ok */Block.__(0, [undefined]);
          }
      case /* Enum */1 :
          if (value !== undefined) {
            var value$2 = value;
            if (value$2 !== 870828711) {
              if (typeof value$2 !== "number") {
                var variant = value$2[0];
                var exit = 0;
                if (!(variant !== -976970511 && variant !== 770676513)) {
                  exit = 2;
                }
                if (exit === 2) {
                  var v = value$2[1];
                  var match$1 = Belt_List.getBy(typ[0].values, (function (enumValue) {
                          return enumValue.name === v;
                        }));
                  if (match$1 !== undefined) {
                    return /* Ok */Block.__(0, [Caml_option.some(match$1.value)]);
                  } else {
                    return /* Error */Block.__(1, [Curry._2(Printf.sprintf(/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "Invalid enum value for argument `",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    "` on field `",
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* "`" */96,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ]),
                                        "Invalid enum value for argument `%s` on field `%s`"
                                      ]), argName, fieldName)]);
                  }
                }
                
              }
              return /* Error */Block.__(1, [Curry._2(Printf.sprintf(/* Format */[
                                  /* String_literal */Block.__(11, [
                                      "Expected enum for argument `",
                                      /* String */Block.__(2, [
                                          /* No_padding */0,
                                          /* String_literal */Block.__(11, [
                                              "` on field `",
                                              /* String */Block.__(2, [
                                                  /* No_padding */0,
                                                  /* Char_literal */Block.__(12, [
                                                      /* "`" */96,
                                                      /* End_of_format */0
                                                    ])
                                                ])
                                            ])
                                        ])
                                    ]),
                                  "Expected enum for argument `%s` on field `%s`"
                                ]), argName, fieldName)]);
            } else {
              return /* Ok */Block.__(0, [undefined]);
            }
          } else {
            return /* Ok */Block.__(0, [undefined]);
          }
          break;
      case /* InputObject */2 :
          if (value !== undefined) {
            var value$3 = value;
            var o = typ[0];
            if (value$3 !== 870828711) {
              if (typeof value$3 !== "number" && value$3[0] === 3850876) {
                return Belt_Result.map(evalArgList(variableMap, fieldType, fieldName, o.fields, value$3[1], o.coerce), (function (coerced) {
                              return Caml_option.some(coerced);
                            }));
              }
              return /* Error */Block.__(1, [evalArgError(fieldType, fieldName, argName, typ, value$3)]);
            } else {
              return /* Ok */Block.__(0, [undefined]);
            }
          } else {
            return /* Ok */Block.__(0, [undefined]);
          }
          break;
      case /* List */3 :
          if (value !== undefined) {
            var value$4 = value;
            var typ$1 = typ[0];
            if (value$4 !== 870828711) {
              if (typeof value$4 !== "number" && value$4[0] === 848054398) {
                var optionValues = Belt_List.map(value$4[1], (function (x) {
                        return x;
                      }));
                return Belt_Result.map(all(optionValues, (function (param) {
                                  return evalArg(variableMap, fieldType, fieldName, argName, typ$1, param);
                                })), (function (coerced) {
                              return coerced;
                            }));
              }
              return Belt_Result.map(evalArg(variableMap, fieldType, fieldName, argName, typ$1, value$4), (function (coerced) {
                            return /* :: */[
                                    coerced,
                                    /* [] */0
                                  ];
                          }));
            } else {
              return /* Ok */Block.__(0, [undefined]);
            }
          } else {
            return /* Ok */Block.__(0, [undefined]);
          }
          break;
      case /* NonNull */4 :
          var typ$2 = typ[0];
          if (value !== undefined) {
            var value$5 = value;
            if (value$5 !== 870828711) {
              return Belt_Result.flatMap(evalArg(variableMap, fieldType, fieldName, argName, typ$2, value$5), (function (param) {
                            if (param !== undefined) {
                              return /* Ok */Block.__(0, [Caml_option.valFromOption(param)]);
                            } else {
                              return /* Error */Block.__(1, [evalArgError(fieldType, fieldName, argName, typ$2, undefined)]);
                            }
                          }));
            } else {
              return /* Error */Block.__(1, [evalArgError(fieldType, fieldName, argName, typ, value)]);
            }
          } else {
            return /* Error */Block.__(1, [evalArgError(fieldType, fieldName, argName, typ, value)]);
          }
      
    }
  };
  var ArgEval = {
    valueToConstValue: valueToConstValue,
    stringOfConstValue: stringOfConstValue,
    stringOfArgType: stringOfArgType,
    evalArgError: evalArgError,
    evalArgList: evalArgList,
    evalArg: evalArg
  };
  var matchesTypeCondition = function (typeCondition, obj) {
    if (typeCondition === obj.name) {
      return true;
    } else {
      return Belt_List.some(obj.abstracts.contents, (function ($$abstract) {
                    return $$abstract.name === typeCondition;
                  }));
    }
  };
  var shouldIncludeField = function (ctx, directives) {
    if (directives) {
      var match = directives[0];
      var name = match.name;
      switch (name) {
        case "include" :
            return eval_directive(ctx, includeDirective, match.arguments, directives[1]);
        case "skip" :
            return eval_directive(ctx, skipDirective, match.arguments, directives[1]);
        default:
          var err = Curry._1(Format.sprintf(/* Format */[
                    /* String_literal */Block.__(11, [
                        "Unknown directive: ",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "Unknown directive: %s"
                  ]), name);
          return /* Error */Block.__(1, [err]);
      }
    } else {
      return /* Ok */Block.__(0, [true]);
    }
  };
  var eval_directive = function (ctx, param, $$arguments, rest) {
    var match = param[0];
    return Belt_Result.flatMap(evalArgList(ctx.variableMap, "directive", match.name, match.args, $$arguments, match.resolve), (function (param) {
                  if (param >= 925778591) {
                    return /* Ok */Block.__(0, [false]);
                  } else {
                    return shouldIncludeField(ctx, rest);
                  }
                }));
  };
  var collectFields = function (ctx, obj, selectionSet) {
    return Belt_Result.map(join(undefined, Belt_List.map(selectionSet, (function (param) {
                          switch (param.tag | 0) {
                            case /* Field */0 :
                                var field = param[0];
                                return Belt_Result.map(shouldIncludeField(ctx, field.directives), (function (shouldInclude) {
                                              if (shouldInclude) {
                                                return /* :: */[
                                                        field,
                                                        /* [] */0
                                                      ];
                                              } else {
                                                return /* [] */0;
                                              }
                                            }));
                            case /* FragmentSpread */1 :
                                var match = Belt_MapString.get(ctx.fragmentMap, param[0].name);
                                if (match !== undefined) {
                                  var match$1 = match;
                                  var selectionSet = match$1.selectionSet;
                                  if (matchesTypeCondition(match$1.typeCondition, obj)) {
                                    return Belt_Result.flatMap(shouldIncludeField(ctx, match$1.directives), (function (shouldInclude) {
                                                  if (shouldInclude) {
                                                    return collectFields(ctx, obj, selectionSet);
                                                  } else {
                                                    return /* Ok */Block.__(0, [/* [] */0]);
                                                  }
                                                }));
                                  } else {
                                    return /* Ok */Block.__(0, [/* [] */0]);
                                  }
                                } else {
                                  return /* Ok */Block.__(0, [/* [] */0]);
                                }
                            case /* InlineFragment */2 :
                                var inlineFragment = param[0];
                                var match$2 = inlineFragment.typeCondition;
                                if (match$2 !== undefined && matchesTypeCondition(match$2, obj)) {
                                  return Belt_Result.flatMap(shouldIncludeField(ctx, inlineFragment.directives), (function (shouldInclude) {
                                                if (shouldInclude) {
                                                  return collectFields(ctx, obj, inlineFragment.selectionSet);
                                                } else {
                                                  return /* Ok */Block.__(0, [/* [] */0]);
                                                }
                                              }));
                                } else {
                                  return /* Ok */Block.__(0, [/* [] */0]);
                                }
                            
                          }
                        }))), Belt_List.flatten);
  };
  var fieldName = function (field) {
    var match = field.alias;
    if (match !== undefined) {
      return match;
    } else {
      return field.name;
    }
  };
  var getObjField = function (fieldName, obj) {
    var __x = CamlinternalLazy.force(obj.fields);
    return Belt_List.getBy(__x, (function (param) {
                  return param[0].name === fieldName;
                }));
  };
  var coerceOrNull = function (src, f) {
    if (src !== undefined) {
      return Curry._1(f, Caml_option.valFromOption(src));
    } else {
      return Curry._1($$return, /* Ok */Block.__(0, [/* Null */870828711]));
    }
  };
  var resolveValue = function (executionContext, _src, field, _typ) {
    while(true) {
      var typ = _typ;
      var src = _src;
      switch (typ.tag | 0) {
        case /* Scalar */0 :
            var scalar = typ[0];
            return coerceOrNull(src, (function(scalar){
                      return function (src$prime) {
                        var x = Curry._1(scalar.serialize, src$prime);
                        return Curry._1($$return, /* Ok */Block.__(0, [x]));
                      }
                      }(scalar)));
        case /* Enum */1 :
            var $$enum = typ[0];
            return coerceOrNull(src, (function($$enum){
                      return function (src$prime) {
                        var match = Belt_List.getBy($$enum.values, (function (enumValue) {
                                return Caml_obj.caml_equal(enumValue.value, src$prime);
                              }));
                        if (match !== undefined) {
                          return Curry._1($$return, /* Ok */Block.__(0, [/* `String */[
                                          -976970511,
                                          match.name
                                        ]]));
                        } else {
                          return Curry._1($$return, /* Ok */Block.__(0, [/* Null */870828711]));
                        }
                      }
                      }($$enum)));
        case /* List */2 :
            var typ$prime = typ[0];
            return coerceOrNull(src, (function(typ$prime){
                      return function (src$prime) {
                        return map$1(map(all$1(Belt_List.map(src$prime, (function (srcItem) {
                                                  return resolveValue(executionContext, srcItem, field, typ$prime);
                                                }))), (function (eta) {
                                          return join(undefined, eta);
                                        })), (function (list) {
                                      return /* `List */[
                                              848054398,
                                              list
                                            ];
                                    }));
                      }
                      }(typ$prime)));
        case /* Object */3 :
            var obj = typ[0];
            return coerceOrNull(src, (function(obj){
                      return function (src$prime) {
                        var match = collectFields(executionContext, obj, field.selectionSet);
                        if (match.tag) {
                          return Curry._1($$return, /* Error */Block.__(1, [/* `ArgumentError */[
                                          -531925013,
                                          match[0]
                                        ]]));
                        } else {
                          return resolveFields(executionContext, src$prime, obj, match[0]);
                        }
                      }
                      }(obj)));
        case /* Abstract */4 :
            return coerceOrNull(src, (function (src$prime) {
                          var match = src$prime[0];
                          return resolveValue(executionContext, Caml_option.some(match[1]), field, match[0]);
                        }));
        case /* NonNull */5 :
            _typ = typ[0];
            _src = Caml_option.some(src);
            continue ;
        
      }
    };
  };
  var resolveField = function (executionContext, src, field, param) {
    var fieldDef = param[0];
    var name = fieldName(field);
    var resolver = Curry._2(fieldDef.resolve, executionContext.ctx, src);
    var match = evalArgList(executionContext.variableMap, undefined, fieldDef.name, fieldDef.args, field.arguments, resolver);
    if (match.tag) {
      return Curry._1($$return, /* Error */Block.__(1, [/* `ArgumentError */[
                      -531925013,
                      match[0]
                    ]]));
    } else {
      return bind$1(mapError(Curry._1(fieldDef.lift, match[0]), (function (err) {
                        return /* `ResolveError */[
                                -205431460,
                                /* tuple */[
                                  err,
                                  /* [] */0
                                ]
                              ];
                      })), (function (resolved) {
                    return Curry._2(bind, resolveValue(executionContext, resolved, field, fieldDef.typ), (function (resolvedValue) {
                                  var tmp;
                                  if (resolvedValue.tag) {
                                    if (resolvedValue[0][0] !== -205431460) {
                                      tmp = resolvedValue;
                                    } else {
                                      var match = fieldDef.typ;
                                      tmp = match.tag === /* NonNull */5 ? resolvedValue : /* Ok */Block.__(0, [/* tuple */[
                                              name,
                                              /* Null */870828711
                                            ]]);
                                    }
                                  } else {
                                    tmp = /* Ok */Block.__(0, [/* tuple */[
                                          name,
                                          resolvedValue[0]
                                        ]]);
                                  }
                                  return Curry._1($$return, tmp);
                                }));
                  }));
    }
  };
  var resolveFields = function (executionContext, src, obj, fields) {
    var match = executionContext.operation.operationType;
    var mapFields;
    if (match !== 1) {
      mapFields = mapParalell;
    } else {
      var partial_arg = /* [] */0;
      mapFields = (function (param, param$1) {
          return mapSerial(partial_arg, param, param$1);
        });
    }
    return map$1(map(Curry._2(mapFields, fields, (function (field) {
                          if (field.name === "__typename") {
                            var x_000 = fieldName(field);
                            var x_001 = /* `String */[
                              -976970511,
                              obj.name
                            ];
                            var x = /* tuple */[
                              x_000,
                              x_001
                            ];
                            return Curry._1($$return, /* Ok */Block.__(0, [x]));
                          } else {
                            var match = getObjField(field.name, obj);
                            if (match !== undefined) {
                              return resolveField(executionContext, src, field, match);
                            } else {
                              var err = Curry._2(Printf.sprintf(/* Format */[
                                        /* String_literal */Block.__(11, [
                                            "Field '",
                                            /* String */Block.__(2, [
                                                /* No_padding */0,
                                                /* String_literal */Block.__(11, [
                                                    "' is not defined on type '",
                                                    /* String */Block.__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */Block.__(12, [
                                                            /* "'" */39,
                                                            /* End_of_format */0
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ]),
                                        "Field '%s' is not defined on type '%s'"
                                      ]), field.name, obj.name);
                              return Curry._1($$return, /* Error */Block.__(1, [/* `ValidationError */[
                                              -58570577,
                                              err
                                            ]]));
                            }
                          }
                        })), (function (eta) {
                      return join(undefined, eta);
                    })), (function (assocList) {
                  return /* `Map */[
                          3850876,
                          assocList
                        ];
                }));
  };
  var executeOperation = function (executionContext, operation) {
    var match = operation.operationType;
    switch (match) {
      case /* Query */0 :
          return bind$1(mapError(Curry._1($$return, collectFields(executionContext, executionContext.schema.query, operation.selectionSet)), (function (e) {
                            return /* `ArgumentError */[
                                    -531925013,
                                    e
                                  ];
                          })), (function (fields) {
                        return resolveFields(executionContext, /* () */0, executionContext.schema.query, fields);
                      }));
      case /* Mutation */1 :
          var match$1 = executionContext.schema.mutation;
          if (match$1 !== undefined) {
            var mutation = match$1;
            return bind$1(mapError(Curry._1($$return, collectFields(executionContext, mutation, operation.selectionSet)), (function (e) {
                              return /* `ArgumentError */[
                                      -531925013,
                                      e
                                    ];
                            })), (function (fields) {
                          return resolveFields(executionContext, /* () */0, mutation, fields);
                        }));
          } else {
            return Curry._1($$return, /* Error */Block.__(1, [/* MutationsNotConfigured */500620103]));
          }
      case /* Subscription */2 :
          return Pervasives.failwith("Subscription Not implemented");
      
    }
  };
  var collectOperations = function ($$document) {
    return Belt_List.reduceReverse($$document.definitions, /* [] */0, (function (list, x) {
                  if (x.tag) {
                    return list;
                  } else {
                    return /* :: */[
                            x[0],
                            list
                          ];
                  }
                }));
  };
  var collectFragments = function ($$document) {
    return Belt_List.reduceReverse($$document.definitions, Belt_MapString.empty, (function (fragmentMap, param) {
                  if (param.tag) {
                    var fragment = param[0];
                    return Belt_MapString.set(fragmentMap, fragment.name, fragment);
                  } else {
                    return fragmentMap;
                  }
                }));
  };
  var FragmentCycle = Caml_exceptions.create("Graphql_Schema.Make(Io).FragmentCycle");
  var validateFragmentSelection = function (fragmentMap, visited, selection) {
    switch (selection.tag | 0) {
      case /* Field */0 :
          return Belt_List.forEach(selection[0].selectionSet, (function (param) {
                        return validateFragmentSelection(fragmentMap, visited, param);
                      }));
      case /* FragmentSpread */1 :
          return validateFragment(fragmentMap, visited, selection[0].name);
      case /* InlineFragment */2 :
          return Belt_List.forEach(selection[0].selectionSet, (function (param) {
                        return validateFragmentSelection(fragmentMap, visited, param);
                      }));
      
    }
  };
  var validateFragment = function (fragmentMap, visited, name) {
    var match = Belt_MapString.get(fragmentMap, name);
    if (match !== undefined) {
      var fragment = match;
      if (Curry._2(StringSet.mem, fragment.name, visited)) {
        throw [
              FragmentCycle,
              Curry._1(StringSet.elements, visited)
            ];
      }
      var visited$prime = Curry._2(StringSet.add, fragment.name, visited);
      return Belt_List.forEach(fragment.selectionSet, (function (param) {
                    return validateFragmentSelection(fragmentMap, visited$prime, param);
                  }));
    } else {
      return /* () */0;
    }
  };
  var validateFragments = function (fragmentMap) {
    try {
      Belt_MapString.forEach(fragmentMap, (function (name, param) {
              return validateFragment(fragmentMap, StringSet.empty, name);
            }));
      return /* Ok */Block.__(0, [fragmentMap]);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === FragmentCycle) {
        var cycle = $$String.concat(", ", exn[1]);
        var err = Curry._1(Format.sprintf(/* Format */[
                  /* String_literal */Block.__(11, [
                      "Fragment cycle detected: ",
                      /* String */Block.__(2, [
                          /* No_padding */0,
                          /* End_of_format */0
                        ])
                    ]),
                  "Fragment cycle detected: %s"
                ]), cycle);
        return /* Error */Block.__(1, [/* `ValidationError */[
                    -58570577,
                    err
                  ]]);
      } else {
        throw exn;
      }
    }
  };
  var collectAndValidateFragments = function (doc) {
    return validateFragments(collectFragments(doc));
  };
  var okResponse = function (data) {
    return /* `Map */[
            3850876,
            /* :: */[
              /* tuple */[
                "data",
                data
              ],
              /* [] */0
            ]
          ];
  };
  var errorResponse = function (path, msg) {
    var path$prime = path !== undefined ? path : /* [] */0;
    return /* `Map */[
            3850876,
            /* :: */[
              /* tuple */[
                "data",
                /* Null */870828711
              ],
              /* :: */[
                /* tuple */[
                  "errors",
                  /* `List */[
                    848054398,
                    /* :: */[
                      /* `Map */[
                        3850876,
                        /* :: */[
                          /* tuple */[
                            "message",
                            /* `String */[
                              -976970511,
                              msg
                            ]
                          ],
                          /* :: */[
                            /* tuple */[
                              "path",
                              /* `List */[
                                848054398,
                                Belt_List.map(path$prime, (function (s) {
                                        return /* `String */[
                                                -976970511,
                                                s
                                              ];
                                      }))
                              ]
                            ],
                            /* [] */0
                          ]
                        ]
                      ],
                      /* [] */0
                    ]
                  ]
                ],
                /* [] */0
              ]
            ]
          ];
  };
  var execute = function ($staropt$star, $$document, schema, ctx) {
    var variables = $staropt$star !== undefined ? $staropt$star : /* [] */0;
    var execute$prime = function (schema, ctx, $$document) {
      var operations = collectOperations($$document);
      return bind$1(Curry._1($$return, validateFragments(collectFragments($$document))), (function (fragmentMap) {
                    var variableMap = Belt_List.reduce(variables, Belt_MapString.empty, (function (map, param) {
                            return Belt_MapString.set(map, param[0], param[1]);
                          }));
                    var schema$prime = addSchemaField(schema);
                    return Belt_List.headExn(Belt_List.map(operations, (function (operation) {
                                      var executionContext = {
                                        schema: schema$prime,
                                        operation: operation,
                                        fragmentMap: fragmentMap,
                                        variableMap: variableMap,
                                        ctx: ctx
                                      };
                                      return executeOperation(executionContext, operation);
                                    })));
                  }));
    };
    return map(execute$prime(schema, ctx, $$document), (function (param) {
                  if (param.tag) {
                    var match = param[0];
                    if (typeof match === "number") {
                      if (match !== 500620103) {
                        if (match >= 858858043) {
                          if (match >= 925688028) {
                            return errorResponse(undefined, "No operation found");
                          } else {
                            return errorResponse(undefined, "Subscriptions not configured");
                          }
                        } else if (match >= 763273585) {
                          return errorResponse(undefined, "Operation name required");
                        } else {
                          return errorResponse(undefined, "Operation not found");
                        }
                      } else {
                        return errorResponse(undefined, "Mutations not configured");
                      }
                    } else if (match[0] !== -205431460) {
                      return errorResponse(undefined, match[1]);
                    } else {
                      var match$1 = match[1];
                      return errorResponse(match$1[1], match$1[0]);
                    }
                  } else {
                    return okResponse(param[0]);
                  }
                }));
  };
  var resultToJson = function (result) {
    return map(result, Graphql_Json.fromConstValue);
  };
  return {
          Io: Io$1,
          Arg: Arg,
          skipDirective: skipDirective,
          includeDirective: includeDirective,
          makeEnum: makeEnum,
          enumValue: enumValue,
          obj: obj,
          field: field,
          async_field: async_field,
          abstractField: abstractField,
          union: union,
          $$interface: $$interface,
          addType: addType,
          query: query,
          mutation: mutation,
          create: create,
          string: string$1,
          $$int: $$int$1,
          $$float: $$float$1,
          $$boolean: $$boolean$1,
          list: list$1,
          nonnull: nonnull$1,
          Introspection: Introspection,
          ArgEval: ArgEval,
          matchesTypeCondition: matchesTypeCondition,
          shouldIncludeField: shouldIncludeField,
          eval_directive: eval_directive,
          collectFields: collectFields,
          fieldName: fieldName,
          getObjField: getObjField,
          coerceOrNull: coerceOrNull,
          resolveValue: resolveValue,
          resolveField: resolveField,
          resolveFields: resolveFields,
          executeOperation: executeOperation,
          collectOperations: collectOperations,
          collectFragments: collectFragments,
          FragmentCycle: FragmentCycle,
          validateFragments: validateFragments,
          validateFragment: validateFragment,
          validateFragmentSelection: validateFragmentSelection,
          collectAndValidateFragments: collectAndValidateFragments,
          okResponse: okResponse,
          errorResponse: errorResponse,
          execute: execute,
          resultToJson: resultToJson
        };
}

var Result$1 = /* alias */0;

var $$Option = /* alias */0;

exports.Result = Result$1;
exports.$$Option = $$Option;
exports.List = List;
exports.StringMap = StringMap;
exports.StringSet = StringSet;
exports.id = id;
exports.Make = Make;
/* StringSet Not a pure module */
