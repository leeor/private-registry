// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Result = require("bs-platform/lib/js/belt_Result.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Graphql_Language_Lexer = require("./Graphql_Language_Lexer.bs.js");

var Result = {
  getExn: Belt_Result.getExn,
  mapWithDefaultU: Belt_Result.mapWithDefaultU,
  mapWithDefault: Belt_Result.mapWithDefault,
  mapU: Belt_Result.mapU,
  map: Belt_Result.map,
  flatMapU: Belt_Result.flatMapU,
  flatMap: Belt_Result.flatMap,
  getWithDefault: Belt_Result.getWithDefault,
  isOk: Belt_Result.isOk,
  isError: Belt_Result.isError,
  eqU: Belt_Result.eqU,
  eq: Belt_Result.eq,
  cmpU: Belt_Result.cmpU,
  cmp: Belt_Result.cmp,
  let_: Belt_Result.flatMap
};

function syntaxError(a) {
  return /* Error */Block.__(1, [/* SyntaxError */[a]]);
}

function expectedError(lexer, token) {
  var a = "Expected" + (Graphql_Language_Lexer.tokenKind(token) + (", found " + Graphql_Language_Lexer.tokenDesc(lexer.curr)));
  return /* Error */Block.__(1, [/* SyntaxError */[a]]);
}

function expect(lexer, token) {
  var currToken = lexer.curr.token;
  if (Caml_obj.caml_equal(currToken, token)) {
    return Graphql_Language_Lexer.advance(lexer);
  } else {
    return expectedError(lexer, token);
  }
}

function skip(lexer, skipToken) {
  var token = lexer.curr.token;
  if (Caml_obj.caml_equal(token, skipToken)) {
    return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                  return true;
                }));
  } else {
    return /* Ok */Block.__(0, [false]);
  }
}

function skipKeyword(lexer, value) {
  var match = lexer.curr.token;
  if (typeof match === "number" || match.tag || match[0] !== value) {
    return /* Ok */Block.__(0, [false]);
  } else {
    return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                  return true;
                }));
  }
}

function expectKeyword(lexer, value) {
  return Belt_Result.flatMap(skipKeyword(lexer, value), (function (skipped) {
                if (skipped) {
                  return /* Ok */Block.__(0, [/* () */0]);
                } else {
                  var a = "Expected " + (value + (", found " + Graphql_Language_Lexer.tokenDesc(lexer.curr)));
                  return /* Error */Block.__(1, [/* SyntaxError */[a]]);
                }
              }));
}

function unexpected(lexer) {
  var a = "Unexpected " + Graphql_Language_Lexer.tokenDesc(lexer.curr);
  return /* Error */Block.__(1, [/* SyntaxError */[a]]);
}

function any(lexer, openKind, parseFn, closeKind) {
  return Belt_Result.flatMap(expect(lexer, openKind), (function (param) {
                var collect = function (nodes) {
                  return Belt_Result.flatMap(skip(lexer, closeKind), (function (skipped) {
                                if (skipped) {
                                  return /* Ok */Block.__(0, [Belt_List.reverse(nodes)]);
                                } else {
                                  return Belt_Result.flatMap(Curry._1(parseFn, lexer), (function (node) {
                                                return collect(/* :: */[
                                                            node,
                                                            nodes
                                                          ]);
                                              }));
                                }
                              }));
                };
                return collect(/* [] */0);
              }));
}

function many(lexer, openKind, parseFn, closeKind) {
  return Belt_Result.flatMap(expect(lexer, openKind), (function (param) {
                return Belt_Result.flatMap(Curry._1(parseFn, lexer), (function (node) {
                              var collect = function (nodes) {
                                return Belt_Result.flatMap(skip(lexer, closeKind), (function (skipped) {
                                              if (skipped) {
                                                return /* Ok */Block.__(0, [Belt_List.reverse(nodes)]);
                                              } else {
                                                return Belt_Result.flatMap(Curry._1(parseFn, lexer), (function (node) {
                                                              return collect(/* :: */[
                                                                          node,
                                                                          nodes
                                                                        ]);
                                                            }));
                                              }
                                            }));
                              };
                              return collect(/* :: */[
                                          node,
                                          /* [] */0
                                        ]);
                            }));
              }));
}

function parseName(lexer) {
  var match = lexer.curr;
  var match$1 = match.token;
  if (typeof match$1 === "number" || match$1.tag) {
    return expectedError(lexer, /* Name */Block.__(0, [""]));
  } else {
    var value = match$1[0];
    return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                  return value;
                }));
  }
}

function parseNamedType(lexer) {
  return Belt_Result.flatMap(parseName(lexer), (function (name) {
                return /* Ok */Block.__(0, [/* NamedType */Block.__(0, [name])]);
              }));
}

function parseVariable(lexer) {
  return Belt_Result.flatMap(expect(lexer, /* Dollar */3), (function (param) {
                return Belt_Result.flatMap(parseName(lexer), (function (name) {
                              return /* Ok */Block.__(0, [/* `Variable */[
                                          -1027682724,
                                          name
                                        ]]);
                            }));
              }));
}

function parseValueLiteral(lexer, isConst) {
  var match = lexer.curr.token;
  if (typeof match === "number") {
    switch (match) {
      case /* Dollar */3 :
          if (isConst) {
            return unexpected(lexer);
          } else {
            return parseVariable(lexer);
          }
      case /* BracketOpen */11 :
          return Belt_Result.map(any(lexer, /* BracketOpen */11, (function (param) {
                            return parseValueLiteral(param, isConst);
                          }), /* BracketClose */12), (function (list) {
                        return /* `List */[
                                848054398,
                                list
                              ];
                      }));
      case /* BraceOpen */13 :
          return parseObject(lexer, isConst);
      default:
        return unexpected(lexer);
    }
  } else {
    switch (match.tag | 0) {
      case /* Name */0 :
          var value = match[0];
          switch (value) {
            case "false" :
                return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                              return /* `Boolean */[
                                      -883944824,
                                      false
                                    ];
                            }));
            case "null" :
                return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                              return /* Null */870828711;
                            }));
            case "true" :
                return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                              return /* `Boolean */[
                                      -883944824,
                                      true
                                    ];
                            }));
            default:
              return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                            return /* `Enum */[
                                    770676513,
                                    value
                                  ];
                          }));
          }
      case /* Int */1 :
          var value$1 = match[0];
          return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                        return /* `Int */[
                                3654863,
                                Caml_format.caml_int_of_string(value$1)
                              ];
                      }));
      case /* Float */2 :
          var value$2 = match[0];
          return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                        return /* `Float */[
                                365180284,
                                Caml_format.caml_float_of_string(value$2)
                              ];
                      }));
      case /* String */3 :
          var value$3 = match[0];
          return Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                        return /* `String */[
                                -976970511,
                                value$3
                              ];
                      }));
      default:
        return unexpected(lexer);
    }
  }
}

function parseObject(lexer, isConst) {
  return Belt_Result.flatMap(expect(lexer, /* BraceOpen */13), (function (param) {
                var parseFields = function (fields) {
                  return Belt_Result.flatMap(skip(lexer, /* BraceClose */14), (function (skipped) {
                                if (skipped) {
                                  return /* Ok */Block.__(0, [fields]);
                                } else {
                                  return Belt_Result.flatMap(parseObjectField(lexer, isConst), (function (field) {
                                                return parseFields(/* :: */[
                                                            field,
                                                            fields
                                                          ]);
                                              }));
                                }
                              }));
                };
                return Belt_Result.flatMap(parseFields(/* [] */0), (function (fields) {
                              return /* Ok */Block.__(0, [/* `Map */[
                                          3850876,
                                          Belt_List.reverse(fields)
                                        ]]);
                            }));
              }));
}

function parseObjectField(lexer, isConst) {
  return Belt_Result.flatMap(parseName(lexer), (function (name) {
                return Belt_Result.flatMap(expect(lexer, /* Colon */8), (function (param) {
                              return Belt_Result.flatMap(parseValueLiteral(lexer, isConst), (function (value) {
                                            return /* Ok */Block.__(0, [/* tuple */[
                                                        name,
                                                        value
                                                      ]]);
                                          }));
                            }));
              }));
}

function parseTypeReference(lexer) {
  return Belt_Result.flatMap(Belt_Result.flatMap(skip(lexer, /* BracketOpen */11), (function (skipped) {
                    if (skipped) {
                      return Belt_Result.flatMap(parseTypeReference(lexer), (function (t) {
                                    return Belt_Result.flatMap(expect(lexer, /* BracketClose */12), (function (param) {
                                                  return /* Ok */Block.__(0, [/* ListType */Block.__(1, [t])]);
                                                }));
                                  }));
                    } else {
                      return Belt_Result.flatMap(parseNamedType(lexer), (function (typ) {
                                    return /* Ok */Block.__(0, [typ]);
                                  }));
                    }
                  })), (function (typ) {
                return Belt_Result.flatMap(skip(lexer, /* Bang */2), (function (skipped) {
                              if (skipped) {
                                return /* Ok */Block.__(0, [/* NonNullType */Block.__(2, [typ])]);
                              } else {
                                return /* Ok */Block.__(0, [typ]);
                              }
                            }));
              }));
}

function parseArgument(lexer, isConst) {
  return Belt_Result.flatMap(parseName(lexer), (function (name) {
                return Belt_Result.flatMap(expect(lexer, /* Colon */8), (function (param) {
                              return Belt_Result.flatMap(parseValueLiteral(lexer, isConst), (function (valueLiteral) {
                                            return /* Ok */Block.__(0, [/* tuple */[
                                                        name,
                                                        valueLiteral
                                                      ]]);
                                          }));
                            }));
              }));
}

function parseArguments(lexer, isConst) {
  var match = lexer.curr.token;
  if (typeof match === "number" && match === 5) {
    return many(lexer, /* ParenOpen */5, (function (param) {
                  return parseArgument(param, isConst);
                }), /* ParenClose */6);
  } else {
    return /* Ok */Block.__(0, [/* [] */0]);
  }
}

function parseDirective(lexer, isConst) {
  return Belt_Result.flatMap(expect(lexer, /* At */10), (function (param) {
                return Belt_Result.flatMap(parseName(lexer), (function (name) {
                              return Belt_Result.flatMap(parseArguments(lexer, isConst), (function ($$arguments) {
                                            return /* Ok */Block.__(0, [{
                                                        name: name,
                                                        arguments: $$arguments
                                                      }]);
                                          }));
                            }));
              }));
}

function parseDirectives(lexer, isConst) {
  var collect = function (directives) {
    var match = lexer.curr.token;
    if (typeof match === "number" && match === 10) {
      return Belt_Result.flatMap(parseDirective(lexer, isConst), (function (directive) {
                    return collect(/* :: */[
                                directive,
                                directives
                              ]);
                  }));
    } else {
      return /* Ok */Block.__(0, [Belt_List.reverse(directives)]);
    }
  };
  return collect(/* [] */0);
}

function parseOperationType(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number" || match.tag) {
    return unexpected(lexer);
  } else {
    switch (match[0]) {
      case "mutation" :
          return /* Ok */Block.__(0, [/* Mutation */1]);
      case "query" :
          return /* Ok */Block.__(0, [/* Query */0]);
      case "subscription" :
          return /* Ok */Block.__(0, [/* Subscription */2]);
      default:
        return unexpected(lexer);
    }
  }
}

function parseVariableDefinition(lexer) {
  return Belt_Result.flatMap(parseVariable(lexer), (function (variable) {
                return Belt_Result.flatMap(expect(lexer, /* Colon */8), (function (param) {
                              return Belt_Result.flatMap(parseTypeReference(lexer), (function (typ) {
                                            return Belt_Result.flatMap(parseDirectives(lexer, true), (function (directives) {
                                                          return /* Ok */Block.__(0, [{
                                                                      variable: variable,
                                                                      typ: typ,
                                                                      defaultValue: undefined,
                                                                      directives: directives
                                                                    }]);
                                                        }));
                                          }));
                            }));
              }));
}

function parseVariableDefinitions(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number" && match === 5) {
    return many(lexer, /* ParenOpen */5, parseVariableDefinition, /* ParenClose */6);
  } else {
    return /* Ok */Block.__(0, [/* [] */0]);
  }
}

function parseSelectionSet(lexer) {
  return many(lexer, /* BraceOpen */13, parseSelection, /* BraceClose */14);
}

function parseSelection(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number" && match === 7) {
    return parseFragment(lexer);
  } else {
    return parseField(lexer);
  }
}

function parseFragmentName(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number" || match.tag || match[0] !== "on") {
    return parseName(lexer);
  } else {
    return unexpected(lexer);
  }
}

function parseFragment(lexer) {
  return Belt_Result.flatMap(expect(lexer, /* Spread */7), (function (param) {
                return Belt_Result.flatMap(skipKeyword(lexer, "on"), (function (hasTypeCondition) {
                              var match = lexer.curr.token;
                              if (typeof match !== "number" && !match.tag && !hasTypeCondition) {
                                return Belt_Result.flatMap(parseFragmentName(lexer), (function (name) {
                                              return Belt_Result.flatMap(parseDirectives(lexer, false), (function (directives) {
                                                            return /* Ok */Block.__(0, [/* FragmentSpread */Block.__(1, [{
                                                                            name: name,
                                                                            directives: directives
                                                                          }])]);
                                                          }));
                                            }));
                              }
                              var typeCondition;
                              if (hasTypeCondition) {
                                var match$1 = parseName(lexer);
                                typeCondition = match$1.tag ? undefined : match$1[0];
                              } else {
                                typeCondition = undefined;
                              }
                              return Belt_Result.flatMap(parseDirectives(lexer, false), (function (directives) {
                                            return Belt_Result.flatMap(parseSelectionSet(lexer), (function (selectionSet) {
                                                          return /* Ok */Block.__(0, [/* InlineFragment */Block.__(2, [{
                                                                          typeCondition: typeCondition,
                                                                          selectionSet: selectionSet,
                                                                          directives: directives
                                                                        }])]);
                                                        }));
                                          }));
                            }));
              }));
}

function parseField(lexer) {
  return Belt_Result.flatMap(parseName(lexer), (function (name) {
                return Belt_Result.flatMap(Belt_Result.flatMap(skip(lexer, /* Colon */8), (function (skipped) {
                                  if (skipped) {
                                    return Belt_Result.flatMap(parseName(lexer), (function (name2) {
                                                  return /* Ok */Block.__(0, [/* tuple */[
                                                              name,
                                                              name2
                                                            ]]);
                                                }));
                                  } else {
                                    return /* Ok */Block.__(0, [/* tuple */[
                                                undefined,
                                                name
                                              ]]);
                                  }
                                })), (function (param) {
                              var name = param[1];
                              var alias = param[0];
                              return Belt_Result.flatMap(parseArguments(lexer, false), (function ($$arguments) {
                                            return Belt_Result.flatMap(parseDirectives(lexer, false), (function (directives) {
                                                          var match = lexer.curr.token;
                                                          return Belt_Result.flatMap(typeof match === "number" && match === 13 ? parseSelectionSet(lexer) : /* Ok */Block.__(0, [/* [] */0]), (function (selectionSet) {
                                                                        return /* Ok */Block.__(0, [/* Field */Block.__(0, [{
                                                                                        alias: alias,
                                                                                        name: name,
                                                                                        arguments: $$arguments,
                                                                                        selectionSet: selectionSet,
                                                                                        directives: directives
                                                                                      }])]);
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function parseOperationDefinition(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number" && match === 13) {
    return Belt_Result.flatMap(parseSelectionSet(lexer), (function (selectionSet) {
                  return /* Ok */Block.__(0, [/* OperationDefinition */Block.__(0, [{
                                  operationType: /* Query */0,
                                  name: undefined,
                                  variableDefinition: /* [] */0,
                                  directives: /* [] */0,
                                  selectionSet: selectionSet
                                }])]);
                }));
  }
  return Belt_Result.flatMap(parseOperationType(lexer), (function (operationType) {
                return Belt_Result.flatMap(Graphql_Language_Lexer.advance(lexer), (function (param) {
                              var match = lexer.curr.token;
                              var tmp;
                              if (typeof match === "number" || match.tag) {
                                tmp = /* Ok */Block.__(0, [undefined]);
                              } else {
                                var name = match[0];
                                tmp = Belt_Result.map(Graphql_Language_Lexer.advance(lexer), (function (param) {
                                        return name;
                                      }));
                              }
                              return Belt_Result.flatMap(tmp, (function (name) {
                                            return Belt_Result.flatMap(parseVariableDefinitions(lexer), (function (variableDefinition) {
                                                          return Belt_Result.flatMap(parseDirectives(lexer, false), (function (directives) {
                                                                        return Belt_Result.flatMap(parseSelectionSet(lexer), (function (selectionSet) {
                                                                                      return /* Ok */Block.__(0, [/* OperationDefinition */Block.__(0, [{
                                                                                                      operationType: operationType,
                                                                                                      name: name,
                                                                                                      variableDefinition: variableDefinition,
                                                                                                      directives: directives,
                                                                                                      selectionSet: selectionSet
                                                                                                    }])]);
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function parseFragmentDefinition(lexer) {
  return Belt_Result.flatMap(expectKeyword(lexer, "fragment"), (function (param) {
                return Belt_Result.flatMap(parseFragmentName(lexer), (function (name) {
                              return Belt_Result.flatMap(expectKeyword(lexer, "on"), (function (param) {
                                            return Belt_Result.flatMap(parseName(lexer), (function (typeCondition) {
                                                          return Belt_Result.flatMap(parseSelectionSet(lexer), (function (selectionSet) {
                                                                        return Belt_Result.flatMap(parseDirectives(lexer, false), (function (directives) {
                                                                                      return /* Ok */Block.__(0, [/* FragmentDefinition */Block.__(1, [{
                                                                                                      name: name,
                                                                                                      typeCondition: typeCondition,
                                                                                                      selectionSet: selectionSet,
                                                                                                      directives: directives
                                                                                                    }])]);
                                                                                    }));
                                                                      }));
                                                        }));
                                          }));
                            }));
              }));
}

function parseExecutableDefinition(lexer) {
  var match = lexer.curr.token;
  if (typeof match === "number") {
    if (match === /* BraceOpen */13) {
      return parseOperationDefinition(lexer);
    } else {
      return unexpected(lexer);
    }
  } else if (match.tag) {
    return unexpected(lexer);
  } else {
    switch (match[0]) {
      case "fragment" :
          return parseFragmentDefinition(lexer);
      case "mutation" :
      case "query" :
      case "subscription" :
          return parseOperationDefinition(lexer);
      default:
        return unexpected(lexer);
    }
  }
}

function parseDocument(lexer) {
  return Belt_Result.flatMap(many(lexer, /* StartOfFile */0, parseExecutableDefinition, /* EndOfFile */1), (function (definitions) {
                return /* Ok */Block.__(0, [{
                            definitions: definitions
                          }]);
              }));
}

function parse(body) {
  return parseDocument(Graphql_Language_Lexer.make(body));
}

var Lexer = /* alias */0;

exports.Lexer = Lexer;
exports.Result = Result;
exports.syntaxError = syntaxError;
exports.expectedError = expectedError;
exports.expect = expect;
exports.skip = skip;
exports.skipKeyword = skipKeyword;
exports.expectKeyword = expectKeyword;
exports.unexpected = unexpected;
exports.any = any;
exports.many = many;
exports.parseName = parseName;
exports.parseNamedType = parseNamedType;
exports.parseVariable = parseVariable;
exports.parseValueLiteral = parseValueLiteral;
exports.parseObject = parseObject;
exports.parseObjectField = parseObjectField;
exports.parseTypeReference = parseTypeReference;
exports.parseArgument = parseArgument;
exports.parseArguments = parseArguments;
exports.parseDirective = parseDirective;
exports.parseDirectives = parseDirectives;
exports.parseOperationType = parseOperationType;
exports.parseVariableDefinition = parseVariableDefinition;
exports.parseVariableDefinitions = parseVariableDefinitions;
exports.parseSelectionSet = parseSelectionSet;
exports.parseSelection = parseSelection;
exports.parseFragmentName = parseFragmentName;
exports.parseFragment = parseFragment;
exports.parseField = parseField;
exports.parseOperationDefinition = parseOperationDefinition;
exports.parseFragmentDefinition = parseFragmentDefinition;
exports.parseExecutableDefinition = parseExecutableDefinition;
exports.parseDocument = parseDocument;
exports.parse = parse;
/* No side effect */
