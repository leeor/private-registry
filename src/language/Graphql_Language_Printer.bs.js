// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$String = require("bs-platform/lib/js/string.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

function join(list, seperator) {
  return $$String.concat(seperator, Belt_List.keep(list, (function (x) {
                    return x !== "";
                  })));
}

function wrap(left, str, right) {
  var match = str === "";
  if (match) {
    return "";
  } else {
    return left + (str + right);
  }
}

function indent(str) {
  if (str === "") {
    return "";
  } else {
    return "  " + str.replace((/\n/g), "\n  ");
  }
}

function block(list) {
  if (list) {
    return "{\n" + (indent(join(list, "\n")) + "\n}");
  } else {
    return "";
  }
}

function printValue(param) {
  if (typeof param === "number") {
    return "null";
  } else {
    var variant = param[0];
    if (variant >= 3850876) {
      if (variant >= 770676513) {
        if (variant >= 848054398) {
          return "[" + (join(Belt_List.map(param[1], printValue), ", ") + "]");
        } else {
          return param[1];
        }
      } else if (variant >= 365180284) {
        return param[1].toString();
      } else {
        return "{" + (printObjectFields(param[1]) + "}");
      }
    } else if (variant >= -883944824) {
      if (variant >= 3654863) {
        return param[1].toString();
      } else {
        return Pervasives.string_of_bool(param[1]);
      }
    } else if (variant >= -976970511) {
      return JSON.stringify(param[1]);
    } else {
      return "$" + param[1];
    }
  }
}

function printObjectFields(fields) {
  return join(Belt_List.map(fields, printObjectField), ", ");
}

function printObjectField(param) {
  return param[0] + (": " + printValue(param[1]));
}

function printType(param) {
  switch (param.tag | 0) {
    case /* NamedType */0 :
        return param[0];
    case /* ListType */1 :
        return "[" + (printType(param[0]) + "]");
    case /* NonNullType */2 :
        return printType(param[0]) + "!";
    
  }
}

function printVariableDef(param) {
  return printValue(param.variable) + (": " + printType(param.typ));
}

function printVariables(vars) {
  return join(Belt_List.map(vars, printVariableDef), ", ");
}

function printArgument(param) {
  return param[0] + (": " + printValue(param[1]));
}

function printArguments(args) {
  return join(Belt_List.map(args, printArgument), ", ");
}

function printDirective(param) {
  return "@" + (param.name + wrap("(", printArguments(param.arguments), ")"));
}

function printDirectives(directives) {
  return join(Belt_List.map(directives, printDirective), " ");
}

function printOpt(param) {
  if (param !== undefined) {
    return param;
  } else {
    return "";
  }
}

function printSelection(param) {
  switch (param.tag | 0) {
    case /* Field */0 :
        return printField(param[0]);
    case /* FragmentSpread */1 :
        return printFragmentSpread(param[0]);
    case /* InlineFragment */2 :
        return printInlineFragmentDefinition(param[0]);
    
  }
}

function printFragmentSpread(param) {
  return "..." + (param.name + wrap(" ", printDirectives(param.directives), ""));
}

function printInlineFragmentDefinition(param) {
  var typeCondition = param.typeCondition;
  return join(/* :: */[
              "...",
              /* :: */[
                typeCondition !== undefined ? wrap("on ", typeCondition, "") : "",
                /* :: */[
                  printDirectives(param.directives),
                  /* :: */[
                    block(Belt_List.map(param.selectionSet, printSelection)),
                    /* [] */0
                  ]
                ]
              ]
            ], " ");
}

function printField(param) {
  return join(/* :: */[
              printAlias(param.alias) + (param.name + wrap("(", printArguments(param.arguments), ")")),
              /* :: */[
                printDirectives(param.directives),
                /* :: */[
                  block(Belt_List.map(param.selectionSet, printSelection)),
                  /* [] */0
                ]
              ]
            ], " ");
}

function printAlias(param) {
  if (param !== undefined) {
    return param + ": ";
  } else {
    return "";
  }
}

function printSelectionSet(selectionSet) {
  return block(Belt_List.map(selectionSet, printSelection));
}

function printOperationDef(operationDef) {
  var operationTypeStr;
  switch (operationDef.operationType) {
    case /* Query */0 :
        operationTypeStr = "query";
        break;
    case /* Mutation */1 :
        operationTypeStr = "mutation";
        break;
    case /* Subscription */2 :
        operationTypeStr = "subscription";
        break;
    
  }
  var varDefs = "(" + (printVariables(operationDef.variableDefinition) + ")");
  var directives = printDirectives(operationDef.directives);
  var selectionSet = block(Belt_List.map(operationDef.selectionSet, printSelection));
  if (operationDef.operationType === 0 && operationDef.name === undefined && !operationDef.variableDefinition && !operationDef.directives) {
    return selectionSet;
  }
  return join(/* :: */[
              operationTypeStr,
              /* :: */[
                join(/* :: */[
                      printOpt(operationDef.name),
                      /* :: */[
                        varDefs,
                        /* [] */0
                      ]
                    ], ""),
                /* :: */[
                  directives,
                  /* :: */[
                    selectionSet,
                    /* [] */0
                  ]
                ]
              ]
            ], " ");
}

function printFragmentDef(param) {
  return "fragment " + (param.name + (" on " + (param.typeCondition + (" " + (wrap("", printDirectives(param.directives), " ") + block(Belt_List.map(param.selectionSet, printSelection)))))));
}

function printDefinition(definition) {
  if (definition.tag) {
    return printFragmentDef(definition[0]);
  } else {
    return printOperationDef(definition[0]);
  }
}

function print(param) {
  return join(Belt_List.map(param.definitions, printDefinition), "\n\n");
}

exports.join = join;
exports.wrap = wrap;
exports.indent = indent;
exports.block = block;
exports.printValue = printValue;
exports.printObjectFields = printObjectFields;
exports.printObjectField = printObjectField;
exports.printType = printType;
exports.printVariableDef = printVariableDef;
exports.printVariables = printVariables;
exports.printArgument = printArgument;
exports.printArguments = printArguments;
exports.printDirective = printDirective;
exports.printDirectives = printDirectives;
exports.printOpt = printOpt;
exports.printSelectionSet = printSelectionSet;
exports.printSelection = printSelection;
exports.printField = printField;
exports.printAlias = printAlias;
exports.printFragmentSpread = printFragmentSpread;
exports.printInlineFragmentDefinition = printInlineFragmentDefinition;
exports.printOperationDef = printOperationDef;
exports.printFragmentDef = printFragmentDef;
exports.printDefinition = printDefinition;
exports.print = print;
/* No side effect */
